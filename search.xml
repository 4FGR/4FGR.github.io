<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      
        <title>梦境巡查-第三十六次CCF认证(CSP)第二道题个人题解</title>
      
      <link href="/2024/12/08/%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AD%E6%AC%A1CCF%E8%AE%A4%E8%AF%81(CSP)%E7%AC%AC%E4%BA%8C%E9%81%93%E9%A2%98%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/"/>
      <url>/2024/12/08/%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AD%E6%AC%A1CCF%E8%AE%A4%E8%AF%81(CSP)%E7%AC%AC%E4%BA%8C%E9%81%93%E9%A2%98%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目链接：<a href="https://sim.csp.thusaac.com/contest/36/problem/1">TUOJ</a>（需有账号）</p><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>传说每当月光遍布西西艾弗岛，总有一道身影默默守护着居民们的美梦。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>梦境中的西西艾弗岛由 n+1<em>n</em>+1 个区域组成。梦境巡查员顿顿每天都会从梦之源（00 号区域）出发，顺次巡查 1,2,⋯,n1,2,⋯,<em>n</em> 号区域，最后从 n<em>n</em> 号区域返回梦之源。</p><p>在梦境梭需要消耗美梦能量：</p><ul><li>从梦之源出发时，顿顿会携带若干初始能量；</li><li>从第 i<em>i</em> 号区域前往下一区域（0≤i≤n0≤<em>i</em>≤<em>n</em>）需要消耗 ai<em>a**i</em> 单位能量，因此从第 i<em>i</em> 号区域出发时，顿顿剩余的美梦能量需要<strong>大于或等于</strong> ai<em>a**i</em> 单位；</li><li>顺利到达第 i<em>i</em> 号区域（1≤i≤n1≤<em>i</em>≤<em>n</em>）后，顿顿可以从当地居民的美梦中汲取 bi<em>b**i</em> 单位能量作为补给。</li></ul><p>假设顿顿初始携带 w<em>w</em> 单位美梦能量，那么首先需要保证 w≥a0<em>w</em>≥<em>a</em>0，这样顿顿便可消耗 a0<em>a</em>0 能量穿梭到 11 号区域、进而获得 b1<em>b</em>1 单位能量补给。巡查 11 号区域后，顿顿剩余能量为 w−a0+b1<em>w</em>−<em>a</em>0+<em>b</em>1，如果该数值大于或等于 a1<em>a</em>1，顿顿便可继续前往 22 号区域。依此类推，直至最后消耗 an<em>a**n</em> 单位能量从 n<em>n</em> 号区域返回梦之源，便算是顺利完成整个巡查。西西艾弗岛，又迎来安宁的一夜，可喜可贺！</p><p>作为一个成熟的梦境巡查员，顿顿已经知晓初始需要携带多少能量可以保证顺利完成巡查。但在一些意外状况下，比如学生们受期末季的困扰而无法安眠，顿顿可能在某些区域无法采集足够的美梦能量。此时，便需要增加初始携带量以备万全。</p><p>具体来说，考虑一个简单的情况：在 11 到 n<em>n</em> 号区域中，有且仅有一个区域发生意外，顿顿无法从该区域获得能量补给。 如果第 i<em>i</em> 号区域（1≤i≤n1≤<em>i</em>≤<em>n</em>）发生意外（即 bi<em>b**i</em> 变为 00），则此时为顺利完成巡查，顿顿从梦之源出发所携带的最少初始能量记作 w(i)<em>w</em>(<em>i</em>)。</p><p>试帮助顿顿计算 w(1),w(2),⋯,w(n)<em>w</em>(1),<em>w</em>(2),⋯,<em>w</em>(<em>n</em>) 的值。</p></blockquote><p>为了简便的需要,我们设置所有数组长度为n+1，数组下标直接与节点对应。</p><p>结果为</p><p>w[i] &#x3D; dp1[i] + max(0,dp2[i] - remain[i]);</p><p>当然 w[i] &#x3D; max(dp1[i], dp1[i] + dp2[i] - remain[i]) 也是可以的(下面同理)</p><p>我的设置如下:</p><p>dp1[i]是到达第i个节点所需要的最小能量</p><p>dp2[i]是从第i个节点开始顺利完成任务所需要的最小能量</p><p>remain[i]是到达第i个节点前所剩余的能量(当到达方式最优时)</p><p>其中dp1的动态转移方程为</p><center>dp1[i+1] = dp1[i] + max(0, a[i] - remain[i+1])</center><p>dp2的动态转移方程为</p><center>dp2[i] = a[i] + max(0, dp2[i+1] - b[i+1]) </center><p>更新remain:</p><p>remain[i+1] &#x3D; max(0,remain[i+1] - a[i])</p><p>(用if语句也行)</p><p>我的思路是，既然我们要求当第i节点故障时(即无法获取b[i]能量)，顺利完成任务所需要的最少能量，显然是到达这个节点所需要的最少能量，加上从这个节点到最终节点最后回到起始节点所需要的最少能量。由于到达这个节点时，补给所获取的能量还有剩余，所以可以补充后一段的路程，当然这是不可能直接相减的（后一段最少能量不可能为负数），因此一共是max(0, dp2[i] - remain[i]), 总体就是dp1[i] + max(0, dp2[i] - remain[i])。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>); <span class="comment">//取消c++与stdio的同步，使得cin和cout变快</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">//若下标为i,a[i]表示从第i节点到第i+1节点所需的能量</span></span><br><span class="line">    <span class="comment">//a[n]表示从第n节点回到第0节点所需的能量</span></span><br><span class="line">    <span class="type">int</span> a[n<span class="number">+1</span>]; </span><br><span class="line">    <span class="comment">//b[i]表示第i节点可补给的能量，b[0]无用</span></span><br><span class="line">    <span class="type">int</span> b[n<span class="number">+1</span>];</span><br><span class="line">    <span class="type">int</span> dp1[n<span class="number">+1</span>];</span><br><span class="line">    <span class="type">int</span> dp2[n<span class="number">+1</span>];</span><br><span class="line">    <span class="type">int</span> remain[n<span class="number">+1</span>];</span><br><span class="line">    <span class="type">int</span> w[n<span class="number">+1</span>]; <span class="comment">//存储结果</span></span><br><span class="line">    remain[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">//显然一开始补给点的能量为0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;=n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    dp1[<span class="number">1</span>] = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">        remain[i<span class="number">+1</span>] = remain[i]+b[i];</span><br><span class="line">        dp1[i<span class="number">+1</span>] = dp1[i] + <span class="built_in">max</span>(<span class="number">0</span>, a[i] - remain[i<span class="number">+1</span>]); <span class="comment">//获取dp1</span></span><br><span class="line">remain[i<span class="number">+1</span>] = <span class="built_in">max</span>(<span class="number">0</span>,remain[i<span class="number">+1</span>] - a[i]); <span class="comment">//更新remain</span></span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; b[n]; <span class="comment">//防止dp1、remain数组溢出，单独放置</span></span><br><span class="line">    dp2[n] = a[n]; <span class="comment">//显然从第n节点回到第1节点所需能量为a[n]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">        dp2[i] = a[i] + <span class="built_in">max</span>(<span class="number">0</span>, dp2[i<span class="number">+1</span>] - b[i<span class="number">+1</span>]) ;  <span class="comment">//获取dp2</span></span><br><span class="line">        w[i] = <span class="built_in">max</span>(dp1[i], dp1[i] + dp2[i] - remain[i]); <span class="comment">//得到w[i]</span></span><br><span class="line">    &#125;</span><br><span class="line">    w[n] = <span class="built_in">max</span>(dp1[n], dp1[n]+ dp2[n] - remain[n]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) cout &lt;&lt; w[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">//输出结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 大学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 算法 </tag>
            
            <tag> csp </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>数据结构-散列表(hash table)</title>
      
      <link href="/2024/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%A3%E5%88%97%E8%A1%A8(hash-table)/"/>
      <url>/2024/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%A3%E5%88%97%E8%A1%A8(hash-table)/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-散列表-hash-table"><a href="#数据结构-散列表-hash-table" class="headerlink" title="数据结构-散列表(hash table)"></a>数据结构-散列表(hash table)</h1><blockquote><p>参考资料：数据结构与算法分析  –Mark Allen Weiss</p></blockquote><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><p><strong>散列(hashing)</strong> ：一种以常数平均时间执行插入、删除和查找的技术，但对元素间进行排序的操作不被支持，例如寻找最大值和最小值。</p><p><strong>散列表（hash table）</strong>: 一个含有关键字的具有固定大小的数组，通过关键字查找对应值，只需要O(1)的时间复杂度。</p><p><strong>散列函数</strong>：将每个关键字映射到从0到size-1这个范围中的某个数，并且放到适当的单元。这个映射就叫做散列函数。</p><h2 id="二、散列函数"><a href="#二、散列函数" class="headerlink" title="二、散列函数"></a>二、散列函数</h2><p><strong>关键字为整数的设置方法:</strong></p><p>  如果输入的关键字是整数，则一般合理的方法就是直接返回 <mark>关键字% 表长</mark>, 最好保证表长为<mark>素数</mark>（质数），以避免某些特殊情况，例如表长为10，而关键字均以0为个位的情况。</p><p><strong>关键字为字符串的设置方法</strong>:</p><ul><li>通常，关键字是字符串，在这种情形下，散列函数需要仔细选择。</li></ul><p>用ASCII码直接相加并取余并不合适, 表长很大，就不能均匀地很好地分配关键字。</p><p>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Hash</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *key, <span class="type">int</span> len)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> hash = <span class="number">0</span>; <span class="comment">//显然，hash值不为负</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( *key != <span class="string">&#x27;\0&#x27;</span>) &#123;hash += *key; key++;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> hash % len;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>而另一个散列如代码所示, 当key长度为3时：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Hash</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *key, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (key[<span class="number">0</span>] + <span class="number">27</span> * key[<span class="number">1</span>]+ <span class="number">27</span>*<span class="number">27</span> key[<span class="number">2</span>]) % len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>27表示英文字母加一个空格的个数，如果key是随机的，那么就会得到一个合理分配，但英文不是随机的,  这导致我们会造成很大的空间浪费，特别是表长足够大时。</p><ul><li><p>下面列出一个较好的方法,它计算：</p><p><math xmlns='http://www.w3.org/1998/Math/MathML'> <munderover> <mrow> <mo> &#x2211; <!-- n-ary summation --> </mo> </mrow> <mrow> <mi> i </mi> <mo> &#x3D; </mo> <mn> 0 </mn> </mrow> <mrow> <mi> k </mi> <mi> e </mi> <mi> y </mi> <mi> s </mi> <mi> i </mi> <mi> z </mi> <mi> e </mi> <mo> - </mo> <mn> 1 </mn> </mrow> </munderover> <mi> k </mi> <mi> e </mi> <mi> y </mi> <mrow> <mo> [ </mo> <mi> k </mi> <mi> e </mi> <mi> y </mi> <mi> s </mi> <mi> i </mi> <mi> z </mi> <mi> e </mi> <mo> - </mo> <mi> i </mi> <mo> - </mo> <mn> 1 </mn> <mo> ] </mo> </mrow> <mo> &#x00D7; <!-- multiplication sign --> </mo> <msup> <mrow> <mn> 32 </mn> </mrow> <mrow> <mi> i </mi> </mrow> </msup> </math></p><p>程序根据Horner法则计算一个(32的)多项式函数,之所以不用27，是因为32可以通过”&lt;&lt;”右移五位获得</p><blockquote><p>Horner法则， 例如 res &#x3D; n<sub>1</sub> + 27n<sub>2</sub> + 27<sup>2</sup>n<sub>3</sub>可转换为 res &#x3D; ( (k<sub>3</sub>) *27+k<sub>2</sub>)* 27 + n<sub>1</sub></p></blockquote><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Hash</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *key, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> hash = <span class="number">0</span>; <span class="comment">//显然hash值为0,数组下标是为正的</span></span><br><span class="line">    <span class="keyword">while</span>(*key != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    hash = (hash&lt;&lt;<span class="number">5</span>) + *key;</span><br><span class="line">        key++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash % len;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>剩下解决的就是当插入元素对应的散列值(hash)已经存在，如何消除这个冲突的问题，我们讨论最简单的两种:</p><center> <b>分离链接法</b> 和 <b>开放定址法 </b></center><h2 id="三、-分离链接法"><a href="#三、-分离链接法" class="headerlink" title="三、 分离链接法"></a>三、 分离链接法</h2><p>​将散列到同一个值的所有元素保留在一个表中。为方便起见，这些表都有表头，如果空间很紧，更可取的方法是避免使用这些表头。（表长不用素数是为了简单起见，这里表长为10）</p><p><img src="https://ooo.0x0.ooo/2024/11/28/OLMzAa.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    E data; <span class="comment">//元素类型为E</span></span><br><span class="line">    ListNode *next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> <span class="title">ListNode</span>,*<span class="title">List</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashTbl</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    List *lists;</span><br><span class="line">&#125;*HashTable;</span><br></pre></td></tr></table></figure><p>为简洁需要，以下代码并未有健壮性检查，自己实现时记得加上()。</p><p><strong>初始化</strong>：它用到与栈的数组实现中相同的想法。设置表的大小为一个素数，指定List的一个指针数组,如果要有表头，就必须给每个表分配一个表头并且设置next为NULL；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HashTable <span class="title function_">InitalizeTable</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">HashTable H;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">    H = (HashTable)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> HashTbl));</span><br><span class="line">    H-&gt;size = size;</span><br><span class="line">    <span class="comment">/* 为确保size是质数，可实现NextPrime函数</span></span><br><span class="line"><span class="comment">    H-&gt;size = NextPrime(size);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    H-&gt;lists = (List *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List)*H-&gt;size);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;H-&gt;size; i++)&#123;</span><br><span class="line">        H-&gt;lists[i] = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">        H-&gt;lists[i]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查找</strong>：我们使用散列元素来确定究竟考察哪个表，此时通常采用遍历的方式,返回被查找项所在位置</p><p>如果<em>data</em>类型是<em>字符串</em>，则比较和赋值相应地用<em>strcmp</em>和<em>strcpy</em>进行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ListNode* <span class="title function_">Find</span><span class="params">(E key, HashTable H)</span>&#123;  <span class="comment">//返回关键字对应的指针</span></span><br><span class="line">    ListNode *p,*l;</span><br><span class="line">    l = (List)H-&gt;lists[Hash(key, H-&gt;size)];  <span class="comment">//找到对应的表</span></span><br><span class="line">    p = l-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data != key)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入</strong>：查找元素是否已经处在合适的位置(如果要插入重复元，那么通常要留出一个额外的域，这个域党重复出现时自增1)，根据容易度，新元素或者插入表的前端，或者后端。有时将新元素插入到表的前端不仅方便，而且还因为新进插入的元素最有可能优先被访问。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(E key, HashTable H)</span>&#123;</span><br><span class="line">ListNode *pos,*p;</span><br><span class="line">    List l;</span><br><span class="line">    </span><br><span class="line">    pos = Find(key, H);</span><br><span class="line">    <span class="keyword">if</span>(pos == <span class="literal">NULL</span>)&#123;  <span class="comment">//key不在散列中,可以插入</span></span><br><span class="line">        p = (ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">        l = H-&gt;lists[Hash(key, H-&gt;size)];</span><br><span class="line">        p-&gt;next = l-&gt;next;  <span class="comment">//此处采用前插法</span></span><br><span class="line">        p-&gt;data = key;</span><br><span class="line">        l-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、开放定址法"><a href="#四、开放定址法" class="headerlink" title="四、开放定址法"></a>四、开放定址法</h2><p>​分离链接法的缺点是需要指针，由于给新单元分配地址需要时间，因此这就导致算法的速度多少有些减慢。<em>开放定址散列法</em>（open addressing hashing）是另外一种用链表解决冲突的方法, 如果有冲突发生，就尝试找到另外空的单元。更一般地，单元 h<sub>0</sub>(X), h<sub>1</sub>((X),  ···,相继试选，其中<mark>h<sub>i</sub>((X)&#x3D;(Hash(X)+F(i)) % size</mark>,且<mark>F(0) &#x3D; 0</mark>。函数F是冲突解决方法。因为所有的数据都要置入表内，所以该算法所需要的表要比分离链接法的表要大，一般说来，装填因子应该低于0.5。现在我们就来考察三个通常的冲突解决方法。</p><h3 id="1-线性探测法"><a href="#1-线性探测法" class="headerlink" title="1.线性探测法"></a>1.线性探测法</h3><p>在该方法中，函数F为i的<strong>线性函数</strong>，常用F(i)&#x3D;i。这相当于逐个探测每个单元(必要时可以绕回)以查找出一个空单元。只要表足够大，总能找到一个自由单元，但较为消耗时间。另外，即便表相对较空，这样占据的单元也会开始形成一些区块，其结果称为<strong>一次聚集</strong>（primary clustering）。于是，散列到区块中的任何关键字都需要多次试选，才能被添加到相应的区块中。</p><h3 id="2-平方探测法"><a href="#2-平方探测法" class="headerlink" title="2.平方探测法"></a>2.平方探测法</h3><p>​平方探测法是一种消除线性探测中一次聚集问题的冲突解决方法，是冲突函数为<strong>二次函数</strong>的方法，常用F(i)&#x3D; i<sup>2</sup>。例如，对于<em>49,89,18,58</em>而言,当要放89时，其位置与49发生冲突，其下一个位置为下一个单元，而当要放58时，其后相邻的单元经探测得知发生了另外的冲突。其下一个位置在距离位置8为 <em>2<sup>2</sup>&#x3D;4</em> 远处，也就是位置2处。</p><p>​对于线性探测，让元素填充满散列表并不好，而对于本方法而言情况甚至更糟。如果使用平方探测，且表的大小是素数，那么当表至少有一半是空的时候，总能够插入一个新的元素。</p><p>​在开放定址散列表中，删除操作需要懒惰删除，虽然这种情况并不存在真正意义上的懒惰。</p><p>​实现开放定址散列:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> Index;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> E;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">KindOfEntry</span>&#123;</span>Legitimate, Empty, Deleted&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashEntry</span>&#123;</span></span><br><span class="line">    E data;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">KindOfEntry</span> <span class="title">info</span>;</span></span><br><span class="line">&#125;Cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashTbl</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    Cell *cells;</span><br><span class="line">&#125;*HashTable;</span><br></pre></td></tr></table></figure><p><strong>初始化</strong>:由分配空间和其后每个单元的<em>info</em>域设置成<em>Empty</em>组成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HashTable <span class="title function_">InitializeTable</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">    HashTable H;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    H = (HashTable)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> HashTbl));</span><br><span class="line">    H-&gt;size = size;</span><br><span class="line">    H-&gt;cells = (Cell *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Cell)*H-&gt;size);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;H-&gt;size; i++)&#123;</span><br><span class="line">        H-&gt;cells[i].info = Empty;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查找</strong>：找到返回key的位置，否则返回最后的单元，以方便插入。查找是否失败，通过枚举值便知晓。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Index <span class="title function_">Find</span><span class="params">(E key, HashTable H)</span>&#123;</span><br><span class="line">    Index CurrentPos;</span><br><span class="line">    <span class="type">int</span> CollisionNum;</span><br><span class="line"></span><br><span class="line">    CollisionNum = <span class="number">0</span>;</span><br><span class="line">    CurrentPos = Hash(key, H-&gt;size);</span><br><span class="line">    <span class="keyword">while</span>(H-&gt;cells[CurrentPos].info != Empty &amp;&amp; H-&gt;cells[CurrentPos].data != key)&#123;</span><br><span class="line">        CurrentPos += <span class="number">2</span>*++CollisionNum - <span class="number">1</span>;  <span class="comment">//平方探测法</span></span><br><span class="line">        <span class="keyword">if</span>(CurrentPos &gt;= H-&gt;size)&#123;</span><br><span class="line">            CurrentPos -= H-&gt;size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> CurrentPos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入</strong>:将插入的元素放在Find所指出的地方。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(E key, HashTable H)</span>&#123;</span><br><span class="line">    Index Pos;</span><br><span class="line">    Pos = Find(key, H);</span><br><span class="line">    <span class="keyword">if</span>(H-&gt;cells[Pos].info != Legitimate)&#123;</span><br><span class="line">        H-&gt;cells[Pos].info = Legitimate;</span><br><span class="line">        H-&gt;cells[Pos].data = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​虽然平方探测法排除了一次聚集，但是散列到同一位置上的那些元素将探测相同的备选单元，这叫做<strong>二次聚集</strong>(secondary clustering)。这是理论上的一个小缺憾，模拟结果指出，它一般要引起另外的少于一半的探测。下面的技术将会排除这个缺憾。</p><h3 id="3-双散列"><a href="#3-双散列" class="headerlink" title="3.双散列"></a>3.双散列</h3><p>​我们考察的最后一个冲突解决方法叫做双散列(double hashing)。对于双散列，一种流行的选择是F(i)&#x3D;i*hash<sub>2</sub>((X)。显然，hash<del>2</del>选择得不好将会是灾难性的，函数一定不要算得0值。另外，保证所有单元都能被探测到也是很重要的，诸如 <em>hash<sub>2</sub>((X)&#x3D;R-(X % R)</em> 这样的函数将起到良好的作用。其中R为小于size的素数。如果表的大小不是素数，那么备选单元就有可能提前用完。但由于平方探测不需要使用第二个散列函数，从而在实践中可能更简单并且更快。</p><h2 id="五、再散列"><a href="#五、再散列" class="headerlink" title="五、再散列"></a>五、再散列</h2><p>​对于使用平方探测的开发定址散列法，如果表中元素太满，那么操作的运行时间将开始消耗过长，且插入操作可能失败。此时，一种解决方法是建立另外一个大约两倍大的表（而且使用一个相关的新散列函数），扫描整个原始散列表，计算每个元素的新散列值并将其插入到新表中。整个操作就叫做<strong>再散列</strong>(rehashing)。</p><p>​显然这是一种较为昂贵的操作，运行时间为O(n), 但由于不是经常发生，因此实际效果还行。特别是，在最后的再散列之前必然已经存在N&#x2F;2次的<em>Insert</em>, 当然添加到每个插入上的花费基本上是一个常数开销。</p><p>​推荐再散列的一种实现方法：途中(middle-of-the-road)策略</p><p>​当表到达某一个装填因子时进行再散列。由于随着装填因子的增加，表的性能的确有下降，因此，以好的截止手段实现，可能是最好的策略。</p><p>​再散列使我们再不用担心表的大小，这很重要，因为在复杂的程序中散列表不能够做到任意大。</p><p>对开放定址散列表的再散列：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HashTable <span class="title function_">Rehash</span><span class="params">( HashTable H)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,OldSize;</span><br><span class="line">    Cell *OldCells;</span><br><span class="line"></span><br><span class="line">    OldCells = H-&gt;cells;</span><br><span class="line">    OldSize = H-&gt;size;</span><br><span class="line">    </span><br><span class="line">    H = InitializeTable(<span class="number">2</span>* OldSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; OldSize; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(OldCells[i].info == Legitimate)</span><br><span class="line">            Insert( OldCells[i].data, H);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(OldCells);</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>感谢观看！</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 散列 </tag>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>各编程语言的运算符优先级</title>
      
      <link href="/2024/11/24/2024-11-24-%E5%90%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2024/11/24/2024-11-24-%E5%90%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="五大编程语言的运算符优先级"><a href="#五大编程语言的运算符优先级" class="headerlink" title="五大编程语言的运算符优先级"></a>五大编程语言的运算符优先级</h1><blockquote><p>图片来自网络, 本文仅供分享、学习目的</p></blockquote><h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><p><img src="/%5Cimages%5C2024-11-24%5COIP-C.jpg" alt="OIP-C"></p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p><img src="/%5Cimages%5C2024-11-24%5COIP-CPP.png" alt="OIP-CPP"></p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><img src="/%5Cimages%5C2024-11-24%5COIP-Java.jpg" alt="OIP-Java"></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>下为Python3的各符号优先级顺序，优先级从高到低</p><p><img src="/%5Cimages%5C2024-11-24%5COIP-Python.png" alt="OIP-Python"></p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><p>Go的各运算符优先级如下，优先级&#x3D;&#x3D;从低到高&#x3D;&#x3D;</p><p><img src="/%5Cimages%5C2024-11-24%5COIP-Go.png" alt="OIP-Go"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      
        <title>记录我的第一个博客</title>
      
      <link href="/2024/11/19/hello-world/"/>
      <url>/2024/11/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>·很高兴创建了我的第一个博客，之后我会努力学习，并分享我的收获和经验</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>