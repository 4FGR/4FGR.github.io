<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      
        <title>[前端]HTML+CSS教程</title>
      
      <link href="/2025/01/11/HTML%E4%B8%8ECSS/"/>
      <url>/2025/01/11/HTML%E4%B8%8ECSS/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><blockquote><p>参考视频:<a href="https://www.bilibili.com/video/BV1kM4y127Li?spm_id_from=333.788.videopod.episodes&vd_source=e0c65757487f00d50e17c6407e3d925b">前端Web开发HTML5+CSS3+移动web视频教程，前端web入门首选黑马程序员_哔哩哔哩_bilibili</a></p></blockquote><p>定义：超文本标记语言</p><p>超文本: 链接</p><p>编辑器：<a href="https://www.jetbrains.com/webstorm/">WebStorm</a>或<a href ="https://code.visualstudio.com/">VsCode</a></p><h2 id="标签语法"><a href="#标签语法" class="headerlink" title="标签语法"></a>标签语法</h2><p><strong>双标签</strong>：</p><p>需要包括文字内容的标签</p><p>语法：开始标签–文字–结束标签</p><p>例如: <code>&lt;strong&gt;文字内容&lt;/strong&gt;</code></p><p>结束标签比开始标签多 &#x2F;， 表示结束的地方。</p><p><strong>单标签</strong>：</p><p>不需要文字内容的标签</p><p>例如水平线标签<code>hr</code></p><h2 id="HTML的基本骨架"><a href="#HTML的基本骨架" class="headerlink" title="HTML的基本骨架"></a>HTML的基本骨架</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        网页主体</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>VS Code快速生成骨架:</p><p>在HTML文件中,<code>!+Enter/Tab</code>键</p><p><code>html</code> :  整个网页</p><p><code>head</code> :  网页头部</p><p><code>title</code> :网页标题</p><p><code>body</code> :  网页主体</p><h2 id="标签的关系"><a href="#标签的关系" class="headerlink" title="标签的关系"></a>标签的关系</h2><p>作用:  明确代码的书写位置</p><ul><li>父子关系(嵌套关系)</li><li>兄弟关系(并列关系)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此处，html与head和body为父子关系，head与body为兄弟关系。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><code>&lt;!--注释内容--&gt;</code></p><h2 id="各种标签"><a href="#各种标签" class="headerlink" title="各种标签"></a>各种标签</h2><h3 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h3><table><thead><tr><th align="center">功能</th><th align="left">标签名</th><th align="left">内容</th><th align="center">单&#x2F;双标签</th></tr></thead><tbody><tr><td align="center">标题</td><td align="left"><code>h1~h6</code> (数字代表标题级别)</td><td align="left">使文字成为标题，加粗加大独占一行</td><td align="center">双</td></tr><tr><td align="center">段落</td><td align="left"><code>p</code></td><td align="left">独占一行，段落有间隙</td><td align="center">双</td></tr><tr><td align="center">换行</td><td align="left"><code>br</code></td><td align="left">换行</td><td align="center">单</td></tr><tr><td align="center">水平线</td><td align="left"><code>hr</code></td><td align="left">划分界限</td><td align="center">单</td></tr></tbody></table><hr><h3 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h3><blockquote><p>strong、em、ins、del自带强调含义（语义）</p></blockquote><table><thead><tr><th align="center">功能</th><th align="center">标签名</th><th align="center">内容</th><th align="center">单&#x2F;双标签</th></tr></thead><tbody><tr><td align="center">加粗</td><td align="center"><code>strong</code>&#x2F;<code>b</code></td><td align="center"><strong>加粗</strong></td><td align="center">双</td></tr><tr><td align="center">倾斜</td><td align="center"><code>em</code>&#x2F;<code>i</code></td><td align="center"><em>倾斜</em></td><td align="center">双</td></tr><tr><td align="center">下划线</td><td align="center"><code>ins</code>&#x2F;<code>u</code></td><td align="center"><ins>下划线</ins></td><td align="center">双</td></tr><tr><td align="center">删除线</td><td align="center"><code>del</code>&#x2F;<code>s</code></td><td align="center"><del>删除线</del></td><td align="center">双</td></tr></tbody></table><hr><h3 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h3><p><code>&lt;img&gt;</code> : 插入图片</p><p>其必须属性为<code>src</code>, 指定图片的URL</p><p>用例: <code>&lt;img src=&quot;图片的URL&quot;&gt;</code></p><p>若用本地图片，URL既可以用绝对路径，也可以用相对路径(使用<code>./</code>从程序所在位置(的文件夹)出发查找目标文件)</p><p>在<code>./</code>前每加一个点<code>.</code>，意味着从上一级文件夹出发访问</p><p>例如:  <code>./img/hello.jpg</code></p><p><mark>属性之间用空格’ ‘隔开</mark></p><table><thead><tr><th align="center">属性</th><th align="center">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">alt</td><td align="center">替换文本</td><td align="center">图片无法显示的时候显示的文字</td></tr><tr><td align="center">title</td><td align="center">提示文本</td><td align="center">鼠标悬停在图片上的提示文字</td></tr><tr><td align="center">width</td><td align="center">图片的宽度</td><td align="center">值为数字，没有单位</td></tr><tr><td align="center">height</td><td align="center">图片的高度</td><td align="center">值为数字，没有单位</td></tr></tbody></table><blockquote><p>浏览器缩放图片是等比缩放的，宽缩小，高也可能缩小</p></blockquote><hr><h3 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h3><p><code>&lt;a href=&quot;网址的URL&quot;&gt;文字&lt;/a&gt;</code></p><p>href属性写<code>#</code>，表示空链接，<a href=#>不会跳转</a></p><table><thead><tr><th>其它属性</th><th>作用</th></tr></thead><tbody><tr><td>target&#x3D;”_blank”</td><td>新窗口跳转页面</td></tr></tbody></table><hr><h3 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h3><p><code>&lt;audio&gt;&lt;/audio&gt;</code></p><table><thead><tr><th align="center">属性</th><th align="center">作用</th><th>说明</th></tr></thead><tbody><tr><td align="center">src(必须属性)</td><td align="center">音频URL</td><td>支持格式：MP3</td></tr><tr><td align="center">controls</td><td align="center">显示音频控制面板</td><td></td></tr><tr><td align="center">loop</td><td align="center">循环播放</td><td></td></tr><tr><td align="center">autoplay</td><td align="center">自动播放</td><td>为了提升用户体验，浏览器一般禁用</td></tr></tbody></table><h3 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h3><p><code>&lt;video&gt;&lt;/video&gt;</code></p><p>属性: src、controls、loop、autoplay、muted(静音播放)</p><p>autoplay: 对于静音视频浏览器不禁用。</p><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>分类: 无序列表<code>ul</code>、有序列表<code>ol</code>、定义列表<code>dl</code></p><p><strong>无序列表</strong></p><p><code>ul</code> 嵌套<code>li</code>, <code>ul</code>是无序列表，<code>li</code>是列表条目</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码效果：</p><blockquote><ul>   <li>第一项</li>   <li>第二项</li></ul></blockquote><p>注意：</p><ul>    <li>ul标签只能包括li</li>    <li>li里可包括其它标签</li></ul><p><strong>有序列表</strong></p><p><code>ol</code>嵌套<code>li</code>, <code>ol</code>是有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码效果:</p><blockquote><ol>    <li>第一项</li>    <li>第二项</li></ol></blockquote><p><strong>定义列表</strong></p><p><code>dl</code>嵌套<code>dt</code>和<code>dd</code>, <code>dt</code>是定义列表的标题, dd是定义列表的描述&#x2F;详情</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>列表标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><dl>   <dt>列表标题</dt>   <dd>描述1</dd>   <dd>描述2</dd></dl></blockquote><p><code>dl</code>里面只能包含<code>dt</code>和<code>dd</code></p><p><code>dt</code>和<code>dd</code>可以包含其它内容</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p><code>table</code>嵌套<code>tr</code>, <code>tr</code>嵌套<code>td</code>&#x2F;<code>th</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;--!border属性为表格边框宽度,可无--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>标签名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>说明<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>table<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>tr<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>行<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>td<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>内容单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>th<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>表头单元格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果展示:</p><table border="1">    <tr>        <th>标签名</th>        <th>说明</th>    </tr>    <tr>        <td>table</td>        <td>表格</td>    </tr>    <tr>        <td>tr</td>        <td>行</td>    </tr>    <tr>        <td>td</td>        <td>内容单元格</td>    </tr>    <tr>        <td>th</td>        <td>表头单元格</td>    </tr></table><p><strong>表格结构标签</strong></p><table><thead><tr><th>标签</th><th>含义</th><th>说明</th></tr></thead><tbody><tr><td>thead</td><td>表格头部</td><td>表格头部内容</td></tr><tr><td>tbody</td><td>表格主体</td><td>主要内容区域</td></tr><tr><td>tfoot</td><td>表格底部</td><td>汇总信息区域</td></tr></tbody></table><p>作用：使结构更清晰，无效果。</p><p>示例代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>标签名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>说明<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>table<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>总结<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>更改展示<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="合并多元格"><a href="#合并多元格" class="headerlink" title="合并多元格"></a>合并多元格</h4><p> 合并多元格的步骤:</p><p>1.明确合并的目标</p><p>2.保留<mark>最左最上</mark>的单元格，添加属性（取值是数字，表示需要合并的单元格数量）</p><ul><li><p>跨行合并，保留最上单元格，添加属性<code>rowspawn</code></p></li><li><p>跨列合并，保留最左单元格，添加属性<code>colspawn</code></p></li></ul><p>3.删除其他单元格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>100<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码效果：</p><table border="1">    <thead>        <tr>            <th>姓名</th>            <th>语文</th>            <th>数学</th>        </tr>    </thead>    <tbody>        <tr>            <td>张三</td>            <td>99</td>            <td rowspan="2">100</td>        </tr>        <tr>            <td>李四</td>            <td>98</td>        </tr>    </tbody></table><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>作用: 收集用户信息</p><h4 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a><code>input</code>标签</h4><p>其<code>type</code>属性不同，功能不同</p><table><thead><tr><th align="center">type属性值</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">text</td><td align="center">文本框，用于输入单行文本</td></tr><tr><td align="center">password</td><td align="center">密码框，输入密码变成*</td></tr><tr><td align="center">radio</td><td align="center">单选框</td></tr><tr><td align="center">checckbox</td><td align="center">多选框</td></tr><tr><td align="center">file</td><td align="center">上传文件</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">文本框<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">密码框<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">单选框<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">多选框<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  文本框<input type="text"></p>  <br><p>  密码框<input type="password"></p>  <br><p>单选框<input type="radio" name="gender">男<br><input type="radio" name="gender">女</p>  <br><p>  多选框<input type="checkbox"></p>  <br><p>  上传文件<input type="file"></p><p><strong>input标签占位文本</strong></p><p><code>&lt;input type=&quot;...&quot; placeholder=&quot;提示信息&quot;&gt;</code></p><p><strong>单选框-radio</strong></p><table><thead><tr><th>属性名</th><th>作用</th><th>特殊说明</th></tr></thead><tbody><tr><td>name</td><td>控件名称</td><td>控件分组，同组只能选中一个</td></tr><tr><td>checked</td><td>默认选中</td><td>属性名和属性值相同，简写为一个单词(即不需要被赋值)</td></tr></tbody></table><p><strong>上传文件-file</strong></p><p>默认情况只能上传一个，想要能同时上传多个，需要有<mark>multiple</mark>属性。</p><p><strong>多选框-checkbox</strong></p><p>又称复选框</p><p>默认选中属性<mark>checked</mark></p><h4 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h4><p><code>select</code>嵌套<code>option</code></p><p><mark>selected</mark>属性表示默认选中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><select>    <option>北京</option>    <option>上海</option>    <option>广州</option>    <option>深圳</option>    <option selected>重庆</option></select><h4 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h4><p>作用:<mark>多行</mark>输入文本的表单控件</p><p>标签:<code>textarea</code>, 双标签</p><p>边框可拖拽,但一般禁用。可以有<code>col</code>、<code>row</code>设置尺寸，但一般是css负责。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span>请输入评论<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><textarea>请输入评论</textarea><h4 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h4><p>作用: 网页中, 某个标签的说明文本</p><p>可使用label增大点击范围</p><p>支持: 文本框、密码框、上传文件、单选框、多选框、文本域等。</p><ul><li>写法一<ul><li>lable标签只包裹内容，不包裹表单控件</li><li>设置lable标签的<code>for</code>属性值，和表单控件的<code>id</code>属性值相同</li></ul></li><li>写法二<ul><li>使用lable标签包裹文字和表达那控件，不需要属性。</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">id</span>=<span class="string">&quot;man&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">&quot;man&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lable</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span><br></pre></td></tr></table></figure><p><input type="radio" name="gender" id="man"><lable for="man">男</lable><br><lable><input type="radio">女</lable></p><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><p><code>button</code>双标签,具有<code>type</code>属性</p><table><thead><tr><th>type属性值</th><th>说明</th></tr></thead><tbody><tr><td>submit</td><td>提交按钮，点击可以提交数据到后台（默认功能）</td></tr><tr><td>reset</td><td>重置按钮，点击后将表单控件恢复默认值</td></tr><tr><td>button</td><td>普通按钮，默认没有功能，一般配合JavaScript使用</td></tr></tbody></table><p>配合<code>form</code>标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;--!发送数据的地址--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span> = <span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果:</p><form action="">    用户名:<input type="text">    <br><br>    密码:<input type="password">    <br><br>    <button type = "reset">重置</button></form><h4 id="无语义的布局标签与字符实体"><a href="#无语义的布局标签与字符实体" class="headerlink" title="无语义的布局标签与字符实体"></a>无语义的布局标签与字符实体</h4><p><strong>无语义的布局标签</strong></p><p>作用: 布局网页(划分网页区域，摆放内容)</p><ul><li>div: 独占一行 (被称作大盒子)</li><li>span: 不换行     (被称作小盒子)</li></ul><p><strong>字符实体</strong></p><p>作用：在网页中显示预留字符</p><table><thead><tr><th>显示结果</th><th>描述</th><th>字符实体</th></tr></thead><tbody><tr><td></td><td>空格</td><td>&amp;nbsp</td></tr><tr><td>&lt;</td><td>小于号</td><td>&amp;lt</td></tr><tr><td>&gt;</td><td>大于号</td><td>&amp;gt</td></tr></tbody></table><p>若不使用字符实体，则即使连续敲出多个空格，网页只显示一个</p><p>故若想显示&lt;p&gt;则使用&amp;ltp&amp;gt</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><p>定义： 层叠样式表(Cascading Style Sheets), 是一种样式表语言，用来描述HTML文档的呈现。</p><p>head标签里放</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*选择器&#123;&#125;*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*CSS属性*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*文字颜色*/</span></span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: red; </span></span><br><span class="line"><span class="language-css">        <span class="comment">/*字号*/</span></span></span><br><span class="line"><span class="language-css">       <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS引入方式"><a href="#CSS引入方式" class="headerlink" title="CSS引入方式"></a>CSS引入方式</h2><ul><li><p>内部样式表: 学习使用</p><ul><li><p>CSS代码写在<mark>style</mark>标签里面</p><p>在head标签里放</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*选择器&#123;&#125;*/</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*CSS属性*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*文字颜色*/</span></span></span><br><span class="line"><span class="language-css">       <span class="attribute">color</span>: red; </span></span><br><span class="line"><span class="language-css">        <span class="comment">/*字号*/</span></span></span><br><span class="line"><span class="language-css">       <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>外部样式表： 开发使用</p><ul><li>CSS代码写在单独的CSS文件中</li><li>在HTML使用<mark>link</mark>标签引入(也放在head内)</li></ul></li></ul><p>​<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./my.css&quot;&gt;</code></p><ul><li><p>行内样式</p><ul><li><p>CSS写在标签的style属性值里</p><p><code>&lt;div style=&quot;color:red; font-size:20px;&quot;&gt;这是div标签&lt;/div&gt;</code></p></li></ul></li></ul><p>效果展示:</p><div style="color:red; font-size:20px;">这是div标签</div><h2 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h2><p>作用: 查找标签，设置样式</p><p>基础选择器</p><ul><li>标签选择器</li><li>类选择器</li><li>id选择器</li><li>通配符选择器</li></ul><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p>使用<mark>标签名</mark>作为选择器,即选中同名标签设置相同的样式。</p><p>例子</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>缺点:无法差异化同名标签的显示效果</p><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>作用: 查找标签，<mark>差异化</mark>设置标签的显示效果。</p><p>步骤</p><ul><li>定义类选择器 –&gt; .类名</li><li>使用类选择器 –&gt; 标签添加class&#x3D;”类名”</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">/*定义类选择器*/</span><br><span class="line">    .red&#123;</span><br><span class="line">color:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;sytle&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--使用类选择器--&gt;</span><br><span class="line">&lt;div class=&quot;red&quot;&gt;这是div&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><p>查找标签，<mark>差异化</mark>设置标签的显示效果。</p><p>场景:  id选择器一般配合JavaScript使用，很少用来设置CSS样式</p><p>步骤</p><ul><li>定义id选择器 –&gt; #id名</li><li>使用id选择器 –&gt; id&#x3D;”id名”</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">/*定义id选择器*/</span><br><span class="line">    #red&#123;</span><br><span class="line">color:red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;sytle&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--使用id选择器--&gt;</span><br><span class="line">&lt;div id=&quot;red&quot;&gt;这是div&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>规则:</p><p><mark>同一个id选择器在一个页面只能使用一次</mark></p><h3 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h3><p>作用：查找页面所有标签，设置标签为相同样式</p><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">* &#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;style&gt;</span><br></pre></td></tr></table></figure><p>使全局颜色为红</p><h2 id="文字控制属性"><a href="#文字控制属性" class="headerlink" title="文字控制属性"></a>文字控制属性</h2><table><thead><tr><th>描述</th><th>属性</th></tr></thead><tbody><tr><td>字体大小</td><td>font-size</td></tr><tr><td>字体粗细</td><td>font-weight</td></tr><tr><td>字体倾斜</td><td>font-style</td></tr><tr><td>行高</td><td>line-height</td></tr><tr><td>字体族</td><td>font-family</td></tr><tr><td>字体复合属性</td><td>font</td></tr><tr><td>文本缩进</td><td>text-indent</td></tr><tr><td>文本对齐</td><td>text-align</td></tr><tr><td>修饰线</td><td>text-decoration</td></tr><tr><td>颜色</td><td>color</td></tr></tbody></table><h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><ul><li>属性名: font-size</li><li>属性值: 文字尺寸(单位px)</li></ul><h3 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h3><p>属性名:font-weight</p><p>属性值</p><ul><li>数字</li></ul><table>    <tr>        <td>正常</td>        <td>400</td>    </tr>    <tr>        <td>加粗</td>        <td>700</td>    </tr></table><ul><li>关键字</li></ul><table>    <tr>        <td>正常</td>        <td>normal</td>    </tr>    <tr>        <td>加粗</td>        <td>bold</td>    </tr></table><h3 id="字体样式-是否倾斜"><a href="#字体样式-是否倾斜" class="headerlink" title="字体样式(是否倾斜)"></a>字体样式(是否倾斜)</h3><p>常见作用：清除文字默认的倾斜效果</p><p>属性名: font-style</p><p>属性值</p><ul><li>正常(不倾斜): normal</li><li>倾斜: italic</li></ul><h3 id="行高"><a href="#行高" class="headerlink" title="行高"></a>行高</h3><p>作用: 设置多行文本的间距</p><p>属性名: line-height</p><p>属性值:</p><ul><li>数字+px</li><li>数字(当前font-size属性值的倍数,)</li></ul><p>行高属性值的计算:  字体大小+上下间距(一行文字的顶端(底端)到下一行文字的顶端(底端)的距离)</p><p>垂直居中技巧：行高属性值和盒子高度一样。(只适用单行)</p><h3 id="字体族"><a href="#字体族" class="headerlink" title="字体族"></a>字体族</h3><p>属性名:  font-family</p><p>属性值：字体名</p><p><code>font-family: 楷体</code></p><blockquote><p>font-family属性值可以书写多个字体名，各个字体名用逗号隔开，执行顺序是从左向右依次查找。</p></blockquote><blockquote><p> 建议适用sans-serif为无衬线字体(无起笔收笔)</p></blockquote><h3 id="font属性"><a href="#font属性" class="headerlink" title="font属性"></a>font属性</h3><p>font是一个可以实现上述的所有效果的复合属性，是一种属性的简写方式，属性值用空格隔开</p><p><mark>font必须写自豪和字体，否则不生效</mark></p><blockquote><p>font: italic 700 30px&#x2F;2 楷体</p><p>&#x2F;&#x2F; 文字倾斜、文字加粗、字体大小是30px\行高2倍、楷体</p></blockquote><h3 id="文本缩进"><a href="#文本缩进" class="headerlink" title="文本缩进"></a>文本缩进</h3><p>段落首行前面空出</p><p>属性名: text-indent</p><p>属性值:</p><ul><li>数字+px</li><li>数字+em(1em &#x3D; 当前标签字号大小)</li></ul><p>例子:</p><p><code>text-indent: 2em</code> &#x2F;&#x2F;空2格</p><h3 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h3><p>作用: 控制内容水平对齐</p><p>属性名: text-align</p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>left</td><td>左对齐(默认)</td></tr><tr><td>center</td><td>居中对齐</td></tr><tr><td>right</td><td>右对齐</td></tr></tbody></table><h3 id="修饰线"><a href="#修饰线" class="headerlink" title="修饰线"></a>修饰线</h3><p>属性名: text-decoration</p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>none</td><td>无</td></tr><tr><td>underline</td><td>下滑线</td></tr><tr><td>line-through</td><td>删除线</td></tr><tr><td>overline</td><td>上划线</td></tr></tbody></table><h3 id="文字颜色"><a href="#文字颜色" class="headerlink" title="文字颜色"></a>文字颜色</h3><p>属性名:  color</p><table><thead><tr><th>颜色表示方式</th><th>属性值</th><th>说明</th><th>使用场景</th></tr></thead><tbody><tr><td>颜色关键字</td><td>颜色引文单词</td><td>red、green…</td><td>学习测试</td></tr><tr><td>rgb表示法</td><td>rgb(r,g,b)</td><td>r,g,b表示红绿蓝三原色，取值0-255</td><td>了解</td></tr><tr><td>rgba表示法</td><td>rgba(r,g,b,a)</td><td>a表示透明度,取值0-1</td><td>开发使用，实现透明</td></tr><tr><td>十六进制表示法</td><td>#RRGGBB</td><td>#000000,#ffcc00,简写#000,#fc0</td><td>开发时使用</td></tr></tbody></table><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">color:red;</span><br><span class="line">color: rgb(0,255,1);</span><br><span class="line">color: rgba(0,255,1,0.5);</span><br><span class="line">color: #fc0;</span><br></pre></td></tr></table></figure><h3 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h3><p>作用: 检查、调试代码</p><p>1.打开调试工具</p><ul><li>F12</li></ul><p>2.使用调试工具</p><p>通过选择工具选择查看区域，可以试着取消css功能，若代码有误会有黄色三角提示。</p><h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h2><p>定义: 由两个或多个基础选择器</p><p>作用: 更准确、更高效的选择目标元素(标签)</p><h3 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h3><p>后代选择器: 选中某元素的后代元素。</p><p>选择器写法: 父选择器、子选择器{css属性}，父子选择器之间用空格隔开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">div span&#123;</span><br><span class="line">color:red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">/*非div后代,颜色正常*/</span><br><span class="line">&lt;span&gt; span标签&lt;/span&gt;</span><br><span class="line">/*为div后代,颜色正常*/</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;span&gt;这是div的儿子span&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h3><p>只能选中子代，非子代的后代不会被选中</p><p>写法: 父选择器&gt;子选择器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &gt; span&#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h3><p>选中多组标签设置相同样式</p><p>写法: 选择器之间用<code>,</code>隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p, </span><br><span class="line">div, </span><br><span class="line">span &#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h3><p>选中同时满足多个条件的元素。</p><p>写法: 选择器1选择器2{CSS属性},选择器之间连写,没有任何符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*.box为类*/</span><br><span class="line">p.box&#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;p class=&quot;box&quot;&gt;红色&lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>伪类表示元素状态， 选中元素的某个状态设置样式。</p><p>鼠标悬停状态: </p><p>选择器:hover{css属性}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a:hover&#123;color:red;&#125;</span><br><span class="line">.box:hover&#123;color:red;&#125;</span><br></pre></td></tr></table></figure><h3 id="伪类-超链接"><a href="#伪类-超链接" class="headerlink" title="伪类-超链接"></a>伪类-超链接</h3><table><thead><tr><th>选择器</th><th>作用</th></tr></thead><tbody><tr><td>:link</td><td>访问前</td></tr><tr><td>:visited</td><td>访问后</td></tr><tr><td>:hover</td><td>鼠标悬停</td></tr><tr><td>:active</td><td>点击时(激活)</td></tr></tbody></table><p>提示：如果要给超链接设置以上四个状态，需要按LVHA的顺序书写。</p><h2 id="CSS特性"><a href="#CSS特性" class="headerlink" title="CSS特性"></a>CSS特性</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>定义:  子级默认继承父级的文字控制属性。</p><p>例子:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">body&#123;</span><br><span class="line">font-size: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;受body影响，字体大小变为30px&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>提示: 自己有的样式，会覆盖从父级继承的样式（其它没有的仍会继承）</p><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>特点:</p><ul><li>相同的属性会覆盖: 后面的CSS属性覆盖前面的CSS属性</li><li>不同的属性会叠加: 不同的CSS属性都生效</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">        <span class="attribute">font-weight</span>:<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">color</span>:green;</span><br><span class="line">        <span class="attribute">font-size</span>:<span class="number">700</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*等同于*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:green;</span><br><span class="line">    <span class="attribute">font-weight</span>:<span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">700</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>又称权重，基于不同种类的选择器的匹配规则。</p><p>规则: 选择器优先级高的样式生效。</p><p>公式: 通配符选择器 &lt; 标签选择器 &lt; 类选择器 &lt; id选择器 &lt; 行内样式 &lt; !important</p><p>(选中标签的范围越大，优先级越低)</p><p>!import 为提权功能，使其权重最高，放在属性值<code>;</code>前慎用。</p><p><strong>叠加计算规则</strong></p><p>叠加计算: 如果是复合选择器，则需要权重叠加计算。</p><p>公式: (每一级不存在进位)</p><p>(行内样式，id选择器个数, 类选择器个数, 标签选择器个数)</p><p>规则:</p><ul><li>从左向右依次比较个数，同一级个数多的优先级高，如果个数相同则向后比较</li><li>!important权重最高</li><li>继承权重最低</li></ul><h2 id="Emmet写法"><a href="#Emmet写法" class="headerlink" title="Emmet写法"></a>Emmet写法</h2><p>代码的简写方式，输入缩写VS Code会自动生成对应的代码.</p><ul><li>HTML</li></ul><p>​</p><table><thead><tr><th>说明</th><th>标签结构</th><th>Emmet</th></tr></thead><tbody><tr><td>类选择器</td><td><code>&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code></td><td>标签名.类名</td></tr><tr><td>id选择器</td><td><code>&lt;div id=&quot;box&quot;&gt;&lt;/div&gt;</code></td><td>标签名#Id名</td></tr><tr><td>同级标签</td><td><code>&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</code></td><td>div+p</td></tr><tr><td>父子级标签</td><td><code>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</code></td><td>div&gt;p</td></tr><tr><td>多个相同标签</td><td><code>&lt;span&gt;1&lt;/span&gt;&lt;span&gt;2&lt;/span&gt;&lt;span&gt;3&lt;/span&gt;</code></td><td>span*3</td></tr><tr><td>有内容的标签</td><td><code>&lt;div&gt;内容&lt;/div&gt;</code></td><td>div(内容)</td></tr></tbody></table><ul><li>CSS</li></ul><p>大多数简写方式为属性单词的首字母</p><h2 id="背景属性"><a href="#背景属性" class="headerlink" title="背景属性"></a>背景属性</h2><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><p>网页中的背景颜色</p><p>属性名: background-color</p><p>属性值: 颜色</p><h3 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h3><p>网页中，使用背景图实现装饰性的图片效果。</p><p>属性名: background-image (bgi)</p><p>属性值: url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">width: 400px;</span><br><span class="line">height: 400px;</span><br><span class="line">/*背景图默认平铺*/</span><br><span class="line">background-image: url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="背景图平铺方式"><a href="#背景图平铺方式" class="headerlink" title="背景图平铺方式"></a>背景图平铺方式</h3><p>属性名:background-repeat</p><table><thead><tr><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>no-repeat</td><td>不平铺</td></tr><tr><td>repeat</td><td>平铺</td></tr><tr><td>repeat-x</td><td>水平方向平铺</td></tr><tr><td>repeat-y</td><td>垂直方向平铺</td></tr></tbody></table><h3 id="背景图位置"><a href="#背景图位置" class="headerlink" title="背景图位置"></a>背景图位置</h3><p>属性名: background-position(bgp)</p><p>属性值:  水平方向位置 垂直方向位置</p><ul><li>关键字</li></ul><table><thead><tr><th>关键字</th><th>位置</th></tr></thead><tbody><tr><td>left</td><td>左侧</td></tr><tr><td>right</td><td>右侧</td></tr><tr><td>center</td><td>居中</td></tr><tr><td>top</td><td>顶部</td></tr><tr><td>bottom</td><td>底部</td></tr></tbody></table><ul><li>坐标（数字+px，正负都行,可与关键词混用)</li></ul><p>例如图片在左上角:</p><p><code>background-position: 0 0</code></p><p><code>background-position: left top</code></p><p>提示:</p><ul><li>关键字法，可以颠倒取值顺序</li><li>写一个关键字，另一个方向默认居中。写一个数字，其表示水平方向，垂直方向居中。</li></ul><h3 id="背景图缩放"><a href="#背景图缩放" class="headerlink" title="背景图缩放"></a>背景图缩放</h3><p>属性名: background-size</p><p>属性值</p><ul><li>关键字</li></ul><table><thead><tr><th>关键字</th><th>作用</th></tr></thead><tbody><tr><td>cover</td><td>等比例缩放至完全覆盖背景区域，可能背景图部分不见</td></tr><tr><td>contain</td><td>等比例缩放至刚好放入背景区域，可能北京区部分空白</td></tr></tbody></table><ul><li>百分比: 根据盒子尺寸计算图片大小</li><li>数字+单位</li></ul><h3 id="背景图固定"><a href="#背景图固定" class="headerlink" title="背景图固定"></a>背景图固定</h3><p>作用: 背景不会随着元素的内容滚动(脱离)</p><p>属性名:background-attachment (bga)</p><p>属性值: fixed</p><h3 id="背景复合属性"><a href="#背景复合属性" class="headerlink" title="背景复合属性"></a>背景复合属性</h3><p>属性名: background  (bg)</p><p>属性值: 背景色、背景图、背景平铺方式、缩放…….（用空格隔开）</p><h2 id="显示模式"><a href="#显示模式" class="headerlink" title="显示模式"></a>显示模式</h2><p>显示模式: 标签(元素)的显示方式</p><ul><li><p>块级元素  (例如div)</p><ul><li>独占一行</li><li>宽度默认是父级的100%</li><li>添加宽高属性生效</li></ul></li><li><p>行内元素  (例如span)</p><ul><li>一行共存多个，尺寸由内容撑开</li><li>添加宽高属性不生效</li></ul></li><li><p>行内块元素  (例如img)</p><ul><li>一行共存多个，默认尺寸由内容撑开</li><li>添加宽高属性生效</li></ul></li></ul><p><strong>转换显示模式</strong></p><p>属性名: display</p><p>属性值: block、inline-block、<em>inline(不常用)</em></p><h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><p>作用: 根据元素的结构关系查找元素。</p><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>E:first-child</td><td>查找第一个E元素</td></tr><tr><td>E:lastchild</td><td>查找最后一个E元素</td></tr><tr><td>E:nth-child(N)</td><td>查找第N个E元素（从1开始）</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">li:first-child&#123;</span><br><span class="line">background-color: green</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;li 1&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>:nth-child（公式）</p><p>例如<code>li:nth-child(2n+1)&#123;&#125;</code></p><p>(此时n从0开始)</p><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><p>作用: 创建虚拟元素(伪元素)，用来摆放装饰性内容</p><table><thead><tr><th>选择器</th><th>说明</th></tr></thead><tbody><tr><td>E::before</td><td>在E元素里面最前面添加一个伪元素</td></tr><tr><td>E:after</td><td>在E元素里面最后面添加一个伪元素</td></tr></tbody></table><ul><li>必须设置content:” “属性。如果没有内容则留空</li><li>伪元素默认是行内显示模式</li><li>权重和标签选择器相同</li></ul>]]></content>
      
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>数据结构-栈</title>
      
      <link href="/2025/01/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
      <url>/2025/01/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前情提要: <a href="https://blog.4fgr.xyz/2025/01/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/">数据结构-线性表 | 4FGR の Blog</a></p></blockquote><blockquote><p>参考资料: 数据结构与算法分析  –Mark Allen Weiss</p></blockquote><h1 id="栈模型"><a href="#栈模型" class="headerlink" title="栈模型"></a>栈模型</h1><p>  栈是限制在插入和删除在末端的线性表，这决定了它的特性是”后进先出”(LIFO)。在解决一些问题时，我们很容易想到通过栈这种结构来解决，例如，对多项式的求解。</p><p>  对于栈而言，基本的操作是<em>Pop</em>和<em>Push</em>,尽管有时通过<em>Top</em>返回栈顶元素的值。</p><p><strong>注意</strong>：栈顶元素是栈中唯一可见的元素。</p><h1 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h1><p>  由于栈是一个表，因此任何实现表的方法都可以实现栈，这里给出两种方法：</p><h2 id="栈的数组实现"><a href="#栈的数组实现" class="headerlink" title="栈的数组实现"></a>栈的数组实现</h2><p>为了讲解的便利和简洁，这里我们通过静态数组的方式实现，大家可以自己实现下动态分配的方法。</p><p><strong>定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125;*<span class="built_in">stack</span>;</span><br></pre></td></tr></table></figure><p><strong>基本操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">initialStack</span><span class="params">(<span class="built_in">stack</span> s)</span>&#123;</span><br><span class="line">    s-&gt;top = <span class="number">-1</span>; <span class="comment">//置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isEmpty</span><span class="params">(<span class="built_in">stack</span> s)</span>&#123; <span class="comment">//判断栈是否为空</span></span><br><span class="line">    <span class="keyword">return</span> s-&gt;top == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isFull</span><span class="params">(<span class="built_in">stack</span> s)</span>&#123;   <span class="comment">//判断栈是否满</span></span><br><span class="line">    <span class="keyword">return</span> s-&gt;top == MAXSIZE<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pop</span><span class="params">(<span class="built_in">stack</span> s, <span class="type">int</span> &amp;e)</span>&#123; <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">if</span>(isEmpty(s)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈空\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    e = s-&gt;data[s-&gt;top--];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(<span class="built_in">stack</span> s, <span class="type">int</span> e)</span>&#123; <span class="comment">//入栈</span></span><br><span class="line">    <span class="keyword">if</span>(isFull(s))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈满\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    s-&gt;data[++s-&gt;top] = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">GetTop</span><span class="params">(<span class="built_in">stack</span> s, <span class="type">int</span> &amp;e)</span>&#123; <span class="comment">//取栈顶元素</span></span><br><span class="line">    <span class="keyword">if</span>(isEmpty(s))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈空\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    e = s-&gt;data[s-&gt;top];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="栈的链表实现"><a href="#栈的链表实现" class="headerlink" title="栈的链表实现"></a>栈的链表实现</h2><p>  链式栈的实现更加灵活，不用像顺序栈被空间所束缚。</p><p><strong>定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StackNode, *<span class="built_in">stack</span>;</span><br></pre></td></tr></table></figure><p><strong>基本操作</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">initialStack</span><span class="params">(<span class="built_in">stack</span> &amp;s)</span>&#123;</span><br><span class="line">    s = (<span class="built_in">stack</span>)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackNode));</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isEmpty</span><span class="params">(<span class="built_in">stack</span> s)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;next == <span class="literal">NULL</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(<span class="built_in">stack</span> s, <span class="type">int</span> e)</span>&#123;</span><br><span class="line">    StackNode *p = (StackNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackNode));</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = s-&gt;next;</span><br><span class="line">    s-&gt;next = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pop</span><span class="params">(<span class="built_in">stack</span> s, <span class="type">int</span> &amp;e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(s))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈空\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    StackNode *p = s-&gt;next;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">GetTop</span><span class="params">(<span class="built_in">stack</span> s, <span class="type">int</span> &amp;e)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(s))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈空\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    e = s-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p><a href="https://www.luogu.com.cn/problem/P1449">P1449 后缀表达式 - 洛谷 | 计算机科学教育新生态</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>数据结构-链表</title>
      
      <link href="/2025/01/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
      <url>/2025/01/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前情提要：<a href="https://blog.4fgr.xyz/2025/01/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/">数据结构-线性表 | 4FGR の Blog</a></p></blockquote><h1 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h1><p>​线性表的链式存储，其存储并非是一段连续的存储空间，为了能够访问链表中的元素，每个链表节点不仅存储了元素信息，还需要存放一个指向其后继的指针。（本文所有链表实现均有头节点）</p><p><strong>结构体定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br></pre></td></tr></table></figure><p><strong>基本操作的实现</strong></p><p><strong>初始化</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化链表</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">initList</span><span class="params">(LinkedList &amp;L)</span>&#123;</span><br><span class="line">    L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span>(L == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>检查空表</strong></p><p>即检查头节点的后继是否为空</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查链表是否为空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isEmpty</span><span class="params">(LinkedList L)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> L-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查找</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找元素</span></span><br><span class="line">LNode* <span class="title function_">Find</span><span class="params">(LinkedList L, <span class="type">int</span> taget)</span>&#123;</span><br><span class="line">    LNode *p = L-&gt;next;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;data != taget)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;  <span class="comment">//找到返回指针，否则返回NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入</strong></p><p>对于插入节点后继非空的情况下，插入方式如图</p><p><img src="/%5Cimages%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%5C%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5.png"></p><p>插入方法的代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在位置postion后插入元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(LinkedList L, LNode *position, <span class="type">int</span> e)</span>&#123;</span><br><span class="line">    LNode *p = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = position-&gt;next; <span class="comment">//改变p的后继</span></span><br><span class="line">    position-&gt;next = p;<span class="comment">//改变position的后继</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><p>对于删除节点后继非空的情况下，删除方式如图</p><p><img src="/%5Cimages%5C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%5C%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4.png"></p><p>删除方法的代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除元素target</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delete</span><span class="params">(LinkedList L, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    LNode *p = L;</span><br><span class="line">    LNode *q = p;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;data != target)&#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p)&#123;</span><br><span class="line">        q-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到目标元素&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>销毁</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//销毁链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeleteList</span><span class="params">(LinkedList &amp;L)</span>&#123;</span><br><span class="line">    LNode *p = L;</span><br><span class="line">    LNode *q = p;</span><br><span class="line">    <span class="keyword">while</span>(p)&#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">    &#125;</span><br><span class="line">    L = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>建立单链表</strong></p><p><mark>头插法</mark></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前插法建立链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateListFront</span><span class="params">(LinkedList &amp;L, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> data;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line">        LNode *p = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        p-&gt;data = data;</span><br><span class="line">        p-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><mark>尾插法</mark></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插法建立链表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreateListRear</span><span class="params">(LinkedList &amp;L, <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    LNode *r = L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="type">int</span> data;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line">        LNode *p = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        p-&gt;data = data;</span><br><span class="line">        r-&gt;next = p;</span><br><span class="line">        r = p;</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h1><p>相比于单链表而言，双链表（双向链表）的定义中多了前驱pre，这对于任意一个非头节点而言，都可以直接访问其前驱节点。</p><p><strong>结构体定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>, *<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode, *DLinkedList;</span><br></pre></td></tr></table></figure><p><strong>基本操作实现</strong></p><p>相比于单链表而言，差异在于对前驱和后继的处理，这里仅对<mark>插入</mark>和<mark>删除</mark>方法作出具体实现:</p><p><strong>插入</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在位置p后插入元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(DLinkedList l, DNode *position, <span class="type">int</span> e)</span>&#123;</span><br><span class="line">    DNode *p = (DNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = position-&gt;next; <span class="comment">//注意改变指针域的顺序</span></span><br><span class="line">    p-&gt;prior = position;</span><br><span class="line">    position-&gt;next = p;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next)&#123;</span><br><span class="line">        p-&gt;next-&gt;prior = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除元素target</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delete</span><span class="params">(DLinkedList L, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    DNode *p = L;</span><br><span class="line">    DNode *q = p;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;data != target)&#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p)&#123;</span><br><span class="line">        q-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next)&#123;</span><br><span class="line">            p-&gt;next-&gt;prior = q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未找到目标元素&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h1><p>单链表和双链表都有循环链表形式，对比之前链表的差异在于其最后节点的后继非空，而是指向头节点或第一个节点(无表头时)。特别地，对于双链表，还得注意头节点或第一个节点的前驱指向最后一个节点。</p><p>此时，对于类似<mark>查找</mark>、<mark>插入</mark>、<mark>删除</mark>等方法的实现，</p><p>应当遍历链表的条件不再为<b>p-&gt;next !&#x3D; NULL</b></p><p>而是 <b>p-&gt;next !&#x3D; L</b> (p从L-&gt;next开始时)</p><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="链表求表长"><a href="#链表求表长" class="headerlink" title="链表求表长"></a>链表求表长</h2><p>对于求出链表的表长，我们有两种方式，一种是通过简单的遍历得出，还有一种我们可以在链表的定义中加入表长信息，例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>;</span></span><br><span class="line">&#125;LNode;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    LNode *head; <span class="comment">//存储链表头节点</span></span><br><span class="line">    <span class="type">int</span> length;  <span class="comment">//存储链表的表长</span></span><br><span class="line">&#125;LinkedList;</span><br></pre></td></tr></table></figure><p>当然，这会导致基本操作的实现要发生一定的变化，还需要记住基本操作中使表长改变的操作中，<strong>length</strong>需要被改变。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>与上述添加length类似，我们还可以往LinkedList添加我们想要的成员，</p><p>例如，我们可以通过添加尾节点rear，使得对尾部节点的访问更便利。</p><p>因此，从实际需求出发，出于便利的需要，我们可以往链表中添加理想的成员。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>数据结构-线性表</title>
      
      <link href="/2025/01/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2025/01/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-线性表"><a href="#数据结构-线性表" class="headerlink" title="数据结构-线性表"></a>数据结构-线性表</h1><blockquote><p>本文仅对线性表进行简单叙述，具体实现会专门出教程，并在具体的数据结构后面给出链接。</p></blockquote><p><strong>定义：</strong>线性表是具有<strong>相同</strong>数据类型的n个元素的<b>有限</b>序列</p><p><strong>基本操作：</strong> 初始化、取值、查找、插入、删除、判空、销毁</p><h2 id="线性表的顺序表示-顺序表"><a href="#线性表的顺序表示-顺序表" class="headerlink" title="线性表的顺序表示-顺序表"></a>线性表的顺序表示-顺序表</h2><p>我们可以这样定义顺序表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data[MAXSIZE];  <span class="comment">//顺序表的元素(假设类型为int，本文元素均以int为例)</span></span><br><span class="line">    <span class="type">int</span> lenth; <span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure><p>当然，如果我们想要通过动态分配的顺序表，只需要让data成为一个指针，并且结构体中存在MaxSize描述当前最大容量即可。</p><p>特点：逻辑位置与其存储的物理顺序相同</p><p>优点：</p><ul><li>可随机访问（取值的时间复杂度为O(1)）</li><li>存储密度高</li></ul><p>缺点：</p><ul><li>插入和删除的时间花费较大</li></ul><h2 id="线性表的存储表示-链表"><a href="#线性表的存储表示-链表" class="headerlink" title="线性表的存储表示-链表"></a>线性表的存储表示-链表</h2><blockquote><p>为了避免顺序表插入和删除的线性开销，我们可以允许表不连续存储，于是链表应运而生</p></blockquote><blockquote><p>我们常常使用头节点head置于链表最前端，其data域无任何东西，优点如下</p><p>1.第一个节点存放在头节点的指针域中，与其他节点一样，无需特殊处理</p><p>2.对空表和非空表的处理有了统一的标准(head-&gt;next是否为空)</p></blockquote><p><strong>单链表</strong></p><p>我们可以这样定义一个简单的单链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span> <span class="comment">//LNode为链表节点</span></span><br><span class="line">    <span class="type">int</span> data;<span class="comment">//链表节点对应的元素</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指向下一个链表节点的指针</span></span><br><span class="line">&#125;*LinkedList; </span><br></pre></td></tr></table></figure><p>我们使得*LNode， 即LinkedList来代表链表。</p><p>通过结构体指针next, 我们就可以遍历链表的所有元素。</p><p><strong>双向链表</strong></p><p>我们可以这样定义一个简单的双向链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">pre</span>;</span> <span class="comment">//指向该节点的前驱</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span> //指向该节点的后继</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>循环链表</strong></p><p>  单链表和双向链表都有其循环形式，结构体形式不需要做出任何改变，我们只需要它最后一个节点的后继是第一个节点即可，这样链表就形成了一个环。</p><h2 id="受限线性表-栈、队列"><a href="#受限线性表-栈、队列" class="headerlink" title="受限线性表: 栈、队列"></a>受限线性表: 栈、队列</h2><p>  它们都是一种线性表，只不过对于它们的功能都进行了限制，只能进行线性表的某些功能，这使得它们的特点和用途更加鲜明，功能更简洁。</p><p><b>栈</b></p><p>栈是一种只能在一端进行插入和删除的数据结构。就像我们整齐地放书本一样，我们只允许最后放的书可以被拿走或用新的书放在其上面。这种操作特性被称为”<strong>后进先出</strong>“</p><p>其中，栈的最后一个元素被称作栈顶元素。</p><p>栈实现的功能主要有两个：</p><p>pop: 弹出栈顶元素</p><p>push: 将元素压入栈顶</p><p>有时也会实现get top功能，即返回栈顶元素的值，而不弹出。</p><p><strong>队列</strong></p><p>队列是一种只能在一端进行删除，在另一端进行插入的数据结构。词如其名，正如我们排队一样，存在着”<strong>先进先出</strong>“的操作特性</p><p>队尾：进行插入的一端</p><p>队头(队首)：进行删除的一端</p><p>enQueue: 入队, 将元素放在队尾</p><p>deQueue: 出队, 删除队头元素</p><p><mark>栈和队列都是一种逻辑结构，都可以通过顺序存储和链式存储实现。</mark></p><h2 id="线性表的推广-数组"><a href="#线性表的推广-数组" class="headerlink" title="线性表的推广: 数组"></a>线性表的推广: 数组</h2><p>  数组是由n个相同类型的数据元素构成的有限序列，每个元素在n个线性关系中的序号称为该元素的下标，下标的取值范围称为数组的维界。</p><p>  数组是线性表的推广。一维数组可视为一个线性表，二位数组可视为其元素是定长数组的线性表，以此类推。</p><p>​数组一旦被定义，其维界就会确定，只能在该维界内存取元素和修改元素。</p><p>对于一维数组，其存储结构关系为:</p><center>LOC(a<sub>i</sub>) = LOC(a<sub>0</sub>) + i * L</center> <p>二维数组(i为高维，j为低维):</p><center>LOC(a<sub>ij</sub>) = LOC(a<sub>0</sub>) + i * row + j</center> <p>多维数组以此类推。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线性表 </tag>
            
            <tag> 链表 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>数据结构绪论</title>
      
      <link href="/2025/01/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/"/>
      <url>/2025/01/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构绪论"><a href="#数据结构绪论" class="headerlink" title="数据结构绪论"></a>数据结构绪论</h1><p>由于几天后数据结构要期末考试，最近几天会出数据结构相关的教程，以作复习。</p><blockquote><p>参考资料：</p><p>数据结构(C语言版)  –严蔚敏，吴伟民</p><p>数据结构与算法分析  –Mark Allen Weiss</p><p>2025年数据结构考研复习指导–王道论坛</p></blockquote><h2 id="数据结构的基本概念"><a href="#数据结构的基本概念" class="headerlink" title="数据结构的基本概念"></a>数据结构的基本概念</h2><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><p><b>数据元素</b>：数据的基本单位，由若干数据项组成</p><p><b>数据对象</b>：具有相同性质的数据元素的集合</p><p><b>抽象数据类型：</b>一组操作的集合</p><p>​<strong>数据结构</strong>是相互之间存在一种或多种特定关系的数据元素的集合。在任何问题中，数据元素都不是孤立存在的，它们之间存在某种关系，这种数据元素之间的关系称为<strong>结构</strong>。数据结构包括三方面内容：<em>逻辑结构、存储结构和数据的运算</em></p><h3 id="数据结构三要素"><a href="#数据结构三要素" class="headerlink" title="数据结构三要素"></a>数据结构三要素</h3><p><mark>1.数据的逻辑结构</mark></p><p>​逻辑结构是指数据元素之间的逻辑关系，与数据的存储无关，分为线性结构和非线性结构</p><p><img src="/images/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%9A%84%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84.png"></p><p><em>集合</em>：结构中的数据元素除“同属一个集合”外，别无其他关系。</p><p><em>线性结构</em>：结构中的数据存在一对一的关系</p><p><em>树形结构</em>：结构中的数据存在一对多的关系</p><p><em>图状结构</em>：结构中的数据存在多对多的关系</p><p>2.数据的存储结构</p><p>​存储结构是指数据结构在计算机中表示(又称映像)，也称物理结构。</p><ul><li>顺序存储：逻辑上相邻的元素存储在物理位置也相邻的存储单元中</li><li>链式存储：借助指示元素存储地址的指针来表示元素之间的逻辑关系</li><li>索引存储：建立附加的索引表</li><li>散列存储：根据元素的关键字直接计算出该元素的存储地址</li></ul><h2 id="算法效率的度量"><a href="#算法效率的度量" class="headerlink" title="算法效率的度量"></a>算法效率的度量</h2><p>一般情况下，算法中基本操作重复执行的次数是关于<strong>n</strong>的某个函数<strong>f(n)</strong>, 算法的时间量度记作</p><center>T(n) = O(f(n))</center><blockquote><p>O的含义是T(n)的数量级，如果存在正常数c和n<sup>0</sup>，使得当n &gt;&#x3D; n<sub>0</sub>时,T(n) &lt;&#x3D; c f(n),则记为T(n) &#x3D; O(f(n))</p></blockquote><p> 我们通过这样的方式表示了算法执行时间的增长率，它主要是由O(f(n))决定的。</p><p>例如，若存在f(n) &#x3D; 2<sup>n</sup> + n<sup>2</sup> , 则 O(f(n)) &#x3D; 2<sup>n</sup> 。显然，当n很大时，相比于2<sup>n</sup> ,n<sup>2</sup>无足轻重了。</p><p>像这样，我们称O(f(n))为<strong>渐进时间复杂度</strong>，简称时间复杂度</p><p>同理，空间复杂度S(n) &#x3D; O(g(n))</p><blockquote><p>使用g(n)是为了区别于f(np></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>[题解]P1011 [NOIP1998 提高组] 车站</title>
      
      <link href="/2025/01/01/%5B%E9%A2%98%E8%A7%A3%5DP1011-%5BNOIP1998-%E6%8F%90%E9%AB%98%E7%BB%84%5D-%E8%BD%A6%E7%AB%99/"/>
      <url>/2025/01/01/%5B%E9%A2%98%E8%A7%A3%5DP1011-%5BNOIP1998-%E6%8F%90%E9%AB%98%E7%BB%84%5D-%E8%BD%A6%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h2 id="题目难点"><a href="#题目难点" class="headerlink" title="题目难点"></a>题目难点</h2><p>对数学功底的考察，能否根据题目描述建立起数学公式, 解出关键的未知数(第二次上下车的人数)</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>洛谷链接： [P1011 <a href="https://www.luogu.com.cn/problem/P1011">NOIP1998 提高组] 车站 - 洛谷 | 计算机科学教育新生态</a></p><h1 id="NOIP1998-提高组-车站"><a href="#NOIP1998-提高组-车站" class="headerlink" title="[NOIP1998 提高组] 车站"></a>[NOIP1998 提高组] 车站</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>火车从始发站（称为第 $1$ 站）开出，在始发站上车的人数为 $a$，然后到达第 $2$ 站，在第 $2$ 站有人上、下车，但上、下车的人数相同，因此在第 $2$ 站开出时（即在到达第 $3$ 站之前）车上的人数保持为 $a$ 人。从第 $3$ 站起（包括第 $3$ 站）上、下车的人数有一定规律：上车的人数都是前两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站（第 $n-1$ 站），都满足此规律。现给出的条件是：共有 $n$ 个车站，始发站上车的人数为 $a$，最后一站下车的人数是 $m$（全部下车）。试问 $x$ 站开出时车上的人数是多少？</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入只有一行四个整数，分别表示始发站上车人数 $a$，车站数 $n$，终点站下车人数 $m$ 和所求的站点编号 $x$。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一行一个整数表示答案：从 $x$ 站开出时车上的人数。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;5 7 32 4</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;13</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>对于全部的测试点，保证 $1 \leq a \leq 20$，$1 \leq x \leq n \leq 20$，$1 \leq m \leq 2 \times 10^4$。</p><p>NOIP1998 提高组 第一题</p></blockquote><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对于这道题而言，我们发现存在两个斐波拉契数列，一个是下车，一个是上车</p><p>我们不妨设置第二站上下车的人数为b，</p><p>显然，getOn[1] &#x3D; a, getOff[1] &#x3D; 0, getOn[2] &#x3D; getOff[2] &#x3D; b.</p><p>对于第n站上车的人数而言(n&gt;2)：</p><center><b>getOn[n] = getOn[n-2]+getOn[n-1]</b></center><p>对于第n站下车的人数而言(n&gt;2):</p><center><b>getOff[n] = getOn[n-1]</b></center><p>问题是，我们并不知晓b为何值，b成为了解决这个车站问题的关键节点。</p><p>突破点是我们接受到的m,即第n站下车的总人数，实际上即车驶离第n-1站时车上的人数。</p><p>显然m 为所有 getOn[i] - getOff[i] 之和 (i&lt;&#x3D;n-1) </p><p>通过表格</p><table><thead><tr><th align="center"></th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th>…</th><th>k</th></tr></thead><tbody><tr><td align="center">getOn</td><td align="center">a</td><td align="center">b</td><td align="center">a+b</td><td align="center">a+2b</td><td>…</td><td>getOn[k]</td></tr><tr><td align="center">getOff</td><td align="center">0</td><td align="center">b</td><td align="center">b</td><td align="center">a+b</td><td>…</td><td>getOn[k-1]</td></tr></tbody></table><p>我们不妨发现，getOff[i]与getOn[i-1]抵消，</p><p>于是乎，在已知b的值的情况下，我们得到：</p><center><b>m = a-b + getOn[n-1]</b></center><p>我们已经知道a和m,为了得到b,我们还需要getOn[n-1],</p><p>在我们不知道b时，我们可以把getOn[n-1]分解成</p><center><b>getOn[n-1] = fibcal(a,0,n-1) + fibcal(0,1,n-1) * b</b></center><p>其中, fibcal为计算斐波拉契数的函数</p><p>将此式子带入上式，我们可以求出b的值,</p><!--对于n==2时的情况，显然b = m-a;--><p>同理，之后对于所求的车开出第x站时的车上人数res为:</p><center><b>res = a-b+fibcal(a,b,x)</b></center><p>代码如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="title">fibcal</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>, <span class="type">int</span>)</span></span>;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n,m,x;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">long</span> res;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line">    <span class="type">int</span> part1 = <span class="built_in">fibcal</span>(<span class="number">0</span>,<span class="number">1</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> part2 = <span class="built_in">fibcal</span>(a,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> b = (n==<span class="number">2</span>? m-a :(m-a-part2)/(part1<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">3</span>)&#123;</span><br><span class="line">        res = a-b+<span class="built_in">fibcal</span>(a,b,x);</span><br><span class="line">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">1</span>)&#123;</span><br><span class="line">       cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">2</span>)&#123;</span><br><span class="line">        cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">long</span> <span class="title">fibcal</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>) <span class="keyword">return</span> b;</span><br><span class="line">    <span class="type">long</span> res[<span class="number">3</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    res[<span class="number">0</span>] = a;</span><br><span class="line">    res[<span class="number">1</span>] = b;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n<span class="number">-2</span>; i++)&#123;</span><br><span class="line">        res[(i<span class="number">+2</span>)%<span class="number">3</span>] = res[i%<span class="number">3</span>] + res[(i<span class="number">+1</span>)%<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    i--;</span><br><span class="line">    i = (i<span class="number">+2</span>) % <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> res[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斐波拉契 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>梦境巡查-第三十六次CCF认证(CSP)第二道题个人题解</title>
      
      <link href="/2024/12/08/%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AD%E6%AC%A1CCF%E8%AE%A4%E8%AF%81(CSP)%E7%AC%AC%E4%BA%8C%E9%81%93%E9%A2%98%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/"/>
      <url>/2024/12/08/%E7%AC%AC%E4%B8%89%E5%8D%81%E5%85%AD%E6%AC%A1CCF%E8%AE%A4%E8%AF%81(CSP)%E7%AC%AC%E4%BA%8C%E9%81%93%E9%A2%98%E4%B8%AA%E4%BA%BA%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>题目链接：<a href="https://sim.csp.thusaac.com/contest/36/problem/1">TUOJ</a>（需有账号）</p><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>传说每当月光遍布西西艾弗岛，总有一道身影默默守护着居民们的美梦。</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>梦境中的西西艾弗岛由 n+1<em>n</em>+1 个区域组成。梦境巡查员顿顿每天都会从梦之源（00 号区域）出发，顺次巡查 1,2,⋯,n1,2,⋯,<em>n</em> 号区域，最后从 n<em>n</em> 号区域返回梦之源。</p><p>在梦境梭需要消耗美梦能量：</p><ul><li>从梦之源出发时，顿顿会携带若干初始能量；</li><li>从第 i<em>i</em> 号区域前往下一区域（0≤i≤n0≤<em>i</em>≤<em>n</em>）需要消耗 ai<em>a**i</em> 单位能量，因此从第 i<em>i</em> 号区域出发时，顿顿剩余的美梦能量需要<strong>大于或等于</strong> ai<em>a**i</em> 单位；</li><li>顺利到达第 i<em>i</em> 号区域（1≤i≤n1≤<em>i</em>≤<em>n</em>）后，顿顿可以从当地居民的美梦中汲取 bi<em>b**i</em> 单位能量作为补给。</li></ul><p>假设顿顿初始携带 w<em>w</em> 单位美梦能量，那么首先需要保证 w≥a0<em>w</em>≥<em>a</em>0，这样顿顿便可消耗 a0<em>a</em>0 能量穿梭到 11 号区域、进而获得 b1<em>b</em>1 单位能量补给。巡查 11 号区域后，顿顿剩余能量为 w−a0+b1<em>w</em>−<em>a</em>0+<em>b</em>1，如果该数值大于或等于 a1<em>a</em>1，顿顿便可继续前往 22 号区域。依此类推，直至最后消耗 an<em>a**n</em> 单位能量从 n<em>n</em> 号区域返回梦之源，便算是顺利完成整个巡查。西西艾弗岛，又迎来安宁的一夜，可喜可贺！</p><p>作为一个成熟的梦境巡查员，顿顿已经知晓初始需要携带多少能量可以保证顺利完成巡查。但在一些意外状况下，比如学生们受期末季的困扰而无法安眠，顿顿可能在某些区域无法采集足够的美梦能量。此时，便需要增加初始携带量以备万全。</p><p>具体来说，考虑一个简单的情况：在 11 到 n<em>n</em> 号区域中，有且仅有一个区域发生意外，顿顿无法从该区域获得能量补给。 如果第 i<em>i</em> 号区域（1≤i≤n1≤<em>i</em>≤<em>n</em>）发生意外（即 bi<em>b**i</em> 变为 00），则此时为顺利完成巡查，顿顿从梦之源出发所携带的最少初始能量记作 w(i)<em>w</em>(<em>i</em>)。</p><p>试帮助顿顿计算 w(1),w(2),⋯,w(n)<em>w</em>(1),<em>w</em>(2),⋯,<em>w</em>(<em>n</em>) 的值。</p></blockquote><p>为了简便的需要,我们设置所有数组长度为n+1，数组下标直接与节点对应。</p><p>结果为</p><p>w[i] &#x3D; dp1[i] + max(0,dp2[i] - remain[i]);</p><p>当然 w[i] &#x3D; max(dp1[i], dp1[i] + dp2[i] - remain[i]) 也是可以的(下面同理)</p><p>我的设置如下:</p><p>dp1[i]是到达第i个节点所需要的最小能量</p><p>dp2[i]是从第i个节点开始顺利完成任务所需要的最小能量</p><p>remain[i]是到达第i个节点前所剩余的能量(当到达方式最优时)</p><p>其中dp1的动态转移方程为</p><center>dp1[i+1] = dp1[i] + max(0, a[i] - remain[i+1])</center><p>dp2的动态转移方程为</p><center>dp2[i] = a[i] + max(0, dp2[i+1] - b[i+1]) </center><p>更新remain:</p><p>remain[i+1] &#x3D; max(0,remain[i+1] - a[i])</p><p>(用if语句也行)</p><p>我的思路是，既然我们要求当第i节点故障时(即无法获取b[i]能量)，顺利完成任务所需要的最少能量，显然是到达这个节点所需要的最少能量，加上从这个节点到最终节点最后回到起始节点所需要的最少能量。由于到达这个节点时，补给所获取的能量还有剩余，所以可以补充后一段的路程，当然这是不可能直接相减的（后一段最少能量不可能为负数），因此一共是max(0, dp2[i] - remain[i]), 总体就是dp1[i] + max(0, dp2[i] - remain[i])。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>); <span class="comment">//取消c++与stdio的同步，使得cin和cout变快</span></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">//若下标为i,a[i]表示从第i节点到第i+1节点所需的能量</span></span><br><span class="line">    <span class="comment">//a[n]表示从第n节点回到第0节点所需的能量</span></span><br><span class="line">    <span class="type">int</span> a[n<span class="number">+1</span>]; </span><br><span class="line">    <span class="comment">//b[i]表示第i节点可补给的能量，b[0]无用</span></span><br><span class="line">    <span class="type">int</span> b[n<span class="number">+1</span>];</span><br><span class="line">    <span class="type">int</span> dp1[n<span class="number">+1</span>];</span><br><span class="line">    <span class="type">int</span> dp2[n<span class="number">+1</span>];</span><br><span class="line">    <span class="type">int</span> remain[n<span class="number">+1</span>];</span><br><span class="line">    <span class="type">int</span> w[n<span class="number">+1</span>]; <span class="comment">//存储结果</span></span><br><span class="line">    remain[<span class="number">1</span>] = <span class="number">0</span>; <span class="comment">//显然一开始补给点的能量为0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;=n; i++) cin &gt;&gt; a[i];</span><br><span class="line">    dp1[<span class="number">1</span>] = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;n; i++)&#123;</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line">        remain[i<span class="number">+1</span>] = remain[i]+b[i];</span><br><span class="line">        dp1[i<span class="number">+1</span>] = dp1[i] + <span class="built_in">max</span>(<span class="number">0</span>, a[i] - remain[i<span class="number">+1</span>]); <span class="comment">//获取dp1</span></span><br><span class="line">remain[i<span class="number">+1</span>] = <span class="built_in">max</span>(<span class="number">0</span>,remain[i<span class="number">+1</span>] - a[i]); <span class="comment">//更新remain</span></span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; b[n]; <span class="comment">//防止dp1、remain数组溢出，单独放置</span></span><br><span class="line">    dp2[n] = a[n]; <span class="comment">//显然从第n节点回到第1节点所需能量为a[n]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">        dp2[i] = a[i] + <span class="built_in">max</span>(<span class="number">0</span>, dp2[i<span class="number">+1</span>] - b[i<span class="number">+1</span>]) ;  <span class="comment">//获取dp2</span></span><br><span class="line">        w[i] = <span class="built_in">max</span>(dp1[i], dp1[i] + dp2[i] - remain[i]); <span class="comment">//得到w[i]</span></span><br><span class="line">    &#125;</span><br><span class="line">    w[n] = <span class="built_in">max</span>(dp1[n], dp1[n]+ dp2[n] - remain[n]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) cout &lt;&lt; w[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>; <span class="comment">//输出结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 算法 </tag>
            
            <tag> csp </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>数据结构-散列表(hash table)</title>
      
      <link href="/2024/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%A3%E5%88%97%E8%A1%A8(hash-table)/"/>
      <url>/2024/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%A3%E5%88%97%E8%A1%A8(hash-table)/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-散列表-hash-table"><a href="#数据结构-散列表-hash-table" class="headerlink" title="数据结构-散列表(hash table)"></a>数据结构-散列表(hash table)</h1><blockquote><p>参考资料：数据结构与算法分析  –Mark Allen Weiss</p></blockquote><h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><p><strong>散列(hashing)</strong> ：一种以常数平均时间执行插入、删除和查找的技术，但对元素间进行排序的操作不被支持，例如寻找最大值和最小值。</p><p><strong>散列表（hash table）</strong>: 一个含有关键字的具有固定大小的数组，通过关键字查找对应值，只需要O(1)的时间复杂度。</p><p><strong>散列函数</strong>：将每个关键字映射到从0到size-1这个范围中的某个数，并且放到适当的单元。这个映射就叫做散列函数。</p><h2 id="二、散列函数"><a href="#二、散列函数" class="headerlink" title="二、散列函数"></a>二、散列函数</h2><p><strong>关键字为整数的设置方法:</strong></p><p>  如果输入的关键字是整数，则一般合理的方法就是直接返回 <mark>关键字% 表长</mark>, 最好保证表长为<mark>素数</mark>（质数），以避免某些特殊情况，例如表长为10，而关键字均以0为个位的情况。</p><p><strong>关键字为字符串的设置方法</strong>:</p><ul><li>通常，关键字是字符串，在这种情形下，散列函数需要仔细选择。</li></ul><p>用ASCII码直接相加并取余并不合适, 表长很大，就不能均匀地很好地分配关键字。</p><p>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Hash</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *key, <span class="type">int</span> len)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> hash = <span class="number">0</span>; <span class="comment">//显然，hash值不为负</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( *key != <span class="string">&#x27;\0&#x27;</span>) &#123;hash += *key; key++;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> hash % len;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>而另一个散列如代码所示, 当key长度为3时：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Hash</span><span class="params">( <span class="type">const</span> <span class="type">char</span> *key, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (key[<span class="number">0</span>] + <span class="number">27</span> * key[<span class="number">1</span>]+ <span class="number">27</span>*<span class="number">27</span> key[<span class="number">2</span>]) % len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>27表示英文字母加一个空格的个数，如果key是随机的，那么就会得到一个合理分配，但英文不是随机的,  这导致我们会造成很大的空间浪费，特别是表长足够大时。</p><ul><li><p>下面列出一个较好的方法,它计算：</p><p><math xmlns='http://www.w3.org/1998/Math/MathML'> <munderover> <mrow> <mo> &#x2211; <!-- n-ary summation --> </mo> </mrow> <mrow> <mi> i </mi> <mo> &#x3D; </mo> <mn> 0 </mn> </mrow> <mrow> <mi> k </mi> <mi> e </mi> <mi> y </mi> <mi> s </mi> <mi> i </mi> <mi> z </mi> <mi> e </mi> <mo> - </mo> <mn> 1 </mn> </mrow> </munderover> <mi> k </mi> <mi> e </mi> <mi> y </mi> <mrow> <mo> [ </mo> <mi> k </mi> <mi> e </mi> <mi> y </mi> <mi> s </mi> <mi> i </mi> <mi> z </mi> <mi> e </mi> <mo> - </mo> <mi> i </mi> <mo> - </mo> <mn> 1 </mn> <mo> ] </mo> </mrow> <mo> &#x00D7; <!-- multiplication sign --> </mo> <msup> <mrow> <mn> 32 </mn> </mrow> <mrow> <mi> i </mi> </mrow> </msup> </math></p><p>程序根据Horner法则计算一个(32的)多项式函数,之所以不用27，是因为32可以通过”&lt;&lt;”右移五位获得</p><blockquote><p>Horner法则， 例如 res &#x3D; n<sub>1</sub> + 27n<sub>2</sub> + 27<sup>2</sup>n<sub>3</sub>可转换为 res &#x3D; ( (k<sub>3</sub>) *27+k<sub>2</sub>)* 27 + n<sub>1</sub></p></blockquote><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Hash</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *key, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> hash = <span class="number">0</span>; <span class="comment">//显然hash值为0,数组下标是为正的</span></span><br><span class="line">    <span class="keyword">while</span>(*key != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    hash = (hash&lt;&lt;<span class="number">5</span>) + *key;</span><br><span class="line">        key++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hash % len;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>剩下解决的就是当插入元素对应的散列值(hash)已经存在，如何消除这个冲突的问题，我们讨论最简单的两种:</p><center> <b>分离链接法</b> 和 <b>开放定址法 </b></center><h2 id="三、-分离链接法"><a href="#三、-分离链接法" class="headerlink" title="三、 分离链接法"></a>三、 分离链接法</h2><p>​将散列到同一个值的所有元素保留在一个表中。为方便起见，这些表都有表头，如果空间很紧，更可取的方法是避免使用这些表头。（表长不用素数是为了简单起见，这里表长为10）</p><p><img src="https://ooo.0x0.ooo/2024/11/28/OLMzAa.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体的定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    E data; <span class="comment">//元素类型为E</span></span><br><span class="line">    ListNode *next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> <span class="title">ListNode</span>,*<span class="title">List</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashTbl</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    List *lists;</span><br><span class="line">&#125;*HashTable;</span><br></pre></td></tr></table></figure><p>为简洁需要，以下代码并未有健壮性检查，自己实现时记得加上()。</p><p><strong>初始化</strong>：它用到与栈的数组实现中相同的想法。设置表的大小为一个素数，指定List的一个指针数组,如果要有表头，就必须给每个表分配一个表头并且设置next为NULL；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">HashTable <span class="title function_">InitalizeTable</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">HashTable H;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">    H = (HashTable)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> HashTbl));</span><br><span class="line">    H-&gt;size = size;</span><br><span class="line">    <span class="comment">/* 为确保size是质数，可实现NextPrime函数</span></span><br><span class="line"><span class="comment">    H-&gt;size = NextPrime(size);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    H-&gt;lists = (List *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(List)*H-&gt;size);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;H-&gt;size; i++)&#123;</span><br><span class="line">        H-&gt;lists[i] = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">        H-&gt;lists[i]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查找</strong>：我们使用散列元素来确定究竟考察哪个表，此时通常采用遍历的方式,返回被查找项所在位置</p><p>如果<em>data</em>类型是<em>字符串</em>，则比较和赋值相应地用<em>strcmp</em>和<em>strcpy</em>进行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ListNode* <span class="title function_">Find</span><span class="params">(E key, HashTable H)</span>&#123;  <span class="comment">//返回关键字对应的指针</span></span><br><span class="line">    ListNode *p,*l;</span><br><span class="line">    l = (List)H-&gt;lists[Hash(key, H-&gt;size)];  <span class="comment">//找到对应的表</span></span><br><span class="line">    p = l-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> &amp;&amp; p-&gt;data != key)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入</strong>：查找元素是否已经处在合适的位置(如果要插入重复元，那么通常要留出一个额外的域，这个域党重复出现时自增1)，根据容易度，新元素或者插入表的前端，或者后端。有时将新元素插入到表的前端不仅方便，而且还因为新进插入的元素最有可能优先被访问。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(E key, HashTable H)</span>&#123;</span><br><span class="line">ListNode *pos,*p;</span><br><span class="line">    List l;</span><br><span class="line">    </span><br><span class="line">    pos = Find(key, H);</span><br><span class="line">    <span class="keyword">if</span>(pos == <span class="literal">NULL</span>)&#123;  <span class="comment">//key不在散列中,可以插入</span></span><br><span class="line">        p = (ListNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">        l = H-&gt;lists[Hash(key, H-&gt;size)];</span><br><span class="line">        p-&gt;next = l-&gt;next;  <span class="comment">//此处采用前插法</span></span><br><span class="line">        p-&gt;data = key;</span><br><span class="line">        l-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、开放定址法"><a href="#四、开放定址法" class="headerlink" title="四、开放定址法"></a>四、开放定址法</h2><p>​分离链接法的缺点是需要指针，由于给新单元分配地址需要时间，因此这就导致算法的速度多少有些减慢。<em>开放定址散列法</em>（open addressing hashing）是另外一种用链表解决冲突的方法, 如果有冲突发生，就尝试找到另外空的单元。更一般地，单元 h<sub>0</sub>(X), h<sub>1</sub>((X),  ···,相继试选，其中<mark>h<sub>i</sub>((X)&#x3D;(Hash(X)+F(i)) % size</mark>,且<mark>F(0) &#x3D; 0</mark>。函数F是冲突解决方法。因为所有的数据都要置入表内，所以该算法所需要的表要比分离链接法的表要大，一般说来，装填因子应该低于0.5。现在我们就来考察三个通常的冲突解决方法。</p><h3 id="1-线性探测法"><a href="#1-线性探测法" class="headerlink" title="1.线性探测法"></a>1.线性探测法</h3><p>在该方法中，函数F为i的<strong>线性函数</strong>，常用F(i)&#x3D;i。这相当于逐个探测每个单元(必要时可以绕回)以查找出一个空单元。只要表足够大，总能找到一个自由单元，但较为消耗时间。另外，即便表相对较空，这样占据的单元也会开始形成一些区块，其结果称为<strong>一次聚集</strong>（primary clustering）。于是，散列到区块中的任何关键字都需要多次试选，才能被添加到相应的区块中。</p><h3 id="2-平方探测法"><a href="#2-平方探测法" class="headerlink" title="2.平方探测法"></a>2.平方探测法</h3><p>​平方探测法是一种消除线性探测中一次聚集问题的冲突解决方法，是冲突函数为<strong>二次函数</strong>的方法，常用F(i)&#x3D; i<sup>2</sup>。例如，对于<em>49,89,18,58</em>而言,当要放89时，其位置与49发生冲突，其下一个位置为下一个单元，而当要放58时，其后相邻的单元经探测得知发生了另外的冲突。其下一个位置在距离位置8为 <em>2<sup>2</sup>&#x3D;4</em> 远处，也就是位置2处。</p><p>​对于线性探测，让元素填充满散列表并不好，而对于本方法而言情况甚至更糟。如果使用平方探测，且表的大小是素数，那么当表至少有一半是空的时候，总能够插入一个新的元素。</p><p>​在开放定址散列表中，删除操作需要懒惰删除，虽然这种情况并不存在真正意义上的懒惰。</p><p>​实现开放定址散列:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">int</span> Index;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> E;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">KindOfEntry</span>&#123;</span>Legitimate, Empty, Deleted&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashEntry</span>&#123;</span></span><br><span class="line">    E data;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">KindOfEntry</span> <span class="title">info</span>;</span></span><br><span class="line">&#125;Cell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HashTbl</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    Cell *cells;</span><br><span class="line">&#125;*HashTable;</span><br></pre></td></tr></table></figure><p><strong>初始化</strong>:由分配空间和其后每个单元的<em>info</em>域设置成<em>Empty</em>组成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">HashTable <span class="title function_">InitializeTable</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">    HashTable H;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    H = (HashTable)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> HashTbl));</span><br><span class="line">    H-&gt;size = size;</span><br><span class="line">    H-&gt;cells = (Cell *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Cell)*H-&gt;size);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;H-&gt;size; i++)&#123;</span><br><span class="line">        H-&gt;cells[i].info = Empty;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查找</strong>：找到返回key的位置，否则返回最后的单元，以方便插入。查找是否失败，通过枚举值便知晓。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Index <span class="title function_">Find</span><span class="params">(E key, HashTable H)</span>&#123;</span><br><span class="line">    Index CurrentPos;</span><br><span class="line">    <span class="type">int</span> CollisionNum;</span><br><span class="line"></span><br><span class="line">    CollisionNum = <span class="number">0</span>;</span><br><span class="line">    CurrentPos = Hash(key, H-&gt;size);</span><br><span class="line">    <span class="keyword">while</span>(H-&gt;cells[CurrentPos].info != Empty &amp;&amp; H-&gt;cells[CurrentPos].data != key)&#123;</span><br><span class="line">        CurrentPos += <span class="number">2</span>*++CollisionNum - <span class="number">1</span>;  <span class="comment">//平方探测法</span></span><br><span class="line">        <span class="keyword">if</span>(CurrentPos &gt;= H-&gt;size)&#123;</span><br><span class="line">            CurrentPos -= H-&gt;size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> CurrentPos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入</strong>:将插入的元素放在Find所指出的地方。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Insert</span><span class="params">(E key, HashTable H)</span>&#123;</span><br><span class="line">    Index Pos;</span><br><span class="line">    Pos = Find(key, H);</span><br><span class="line">    <span class="keyword">if</span>(H-&gt;cells[Pos].info != Legitimate)&#123;</span><br><span class="line">        H-&gt;cells[Pos].info = Legitimate;</span><br><span class="line">        H-&gt;cells[Pos].data = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​虽然平方探测法排除了一次聚集，但是散列到同一位置上的那些元素将探测相同的备选单元，这叫做<strong>二次聚集</strong>(secondary clustering)。这是理论上的一个小缺憾，模拟结果指出，它一般要引起另外的少于一半的探测。下面的技术将会排除这个缺憾。</p><h3 id="3-双散列"><a href="#3-双散列" class="headerlink" title="3.双散列"></a>3.双散列</h3><p>​我们考察的最后一个冲突解决方法叫做双散列(double hashing)。对于双散列，一种流行的选择是F(i)&#x3D;i*hash<sub>2</sub>((X)。显然，hash<del>2</del>选择得不好将会是灾难性的，函数一定不要算得0值。另外，保证所有单元都能被探测到也是很重要的，诸如 <em>hash<sub>2</sub>((X)&#x3D;R-(X % R)</em> 这样的函数将起到良好的作用。其中R为小于size的素数。如果表的大小不是素数，那么备选单元就有可能提前用完。但由于平方探测不需要使用第二个散列函数，从而在实践中可能更简单并且更快。</p><h2 id="五、再散列"><a href="#五、再散列" class="headerlink" title="五、再散列"></a>五、再散列</h2><p>​对于使用平方探测的开发定址散列法，如果表中元素太满，那么操作的运行时间将开始消耗过长，且插入操作可能失败。此时，一种解决方法是建立另外一个大约两倍大的表（而且使用一个相关的新散列函数），扫描整个原始散列表，计算每个元素的新散列值并将其插入到新表中。整个操作就叫做<strong>再散列</strong>(rehashing)。</p><p>​显然这是一种较为昂贵的操作，运行时间为O(n), 但由于不是经常发生，因此实际效果还行。特别是，在最后的再散列之前必然已经存在N&#x2F;2次的<em>Insert</em>, 当然添加到每个插入上的花费基本上是一个常数开销。</p><p>​推荐再散列的一种实现方法：途中(middle-of-the-road)策略</p><p>​当表到达某一个装填因子时进行再散列。由于随着装填因子的增加，表的性能的确有下降，因此，以好的截止手段实现，可能是最好的策略。</p><p>​再散列使我们再不用担心表的大小，这很重要，因为在复杂的程序中散列表不能够做到任意大。</p><p>对开放定址散列表的再散列：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">HashTable <span class="title function_">Rehash</span><span class="params">( HashTable H)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,OldSize;</span><br><span class="line">    Cell *OldCells;</span><br><span class="line"></span><br><span class="line">    OldCells = H-&gt;cells;</span><br><span class="line">    OldSize = H-&gt;size;</span><br><span class="line">    </span><br><span class="line">    H = InitializeTable(<span class="number">2</span>* OldSize);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; OldSize; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(OldCells[i].info == Legitimate)</span><br><span class="line">            Insert( OldCells[i].data, H);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(OldCells);</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>感谢观看！</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 散列 </tag>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      
        <title>各编程语言的运算符优先级</title>
      
      <link href="/2024/11/24/2024-11-24-%E5%90%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/"/>
      <url>/2024/11/24/2024-11-24-%E5%90%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="五大编程语言的运算符优先级"><a href="#五大编程语言的运算符优先级" class="headerlink" title="五大编程语言的运算符优先级"></a>五大编程语言的运算符优先级</h1><blockquote><p>图片来自网络, 本文仅供分享、学习目的</p></blockquote><h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><p><img src="/%5Cimages%5C2024-11-24%5COIP-C.jpg" alt="OIP-C"></p><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><p><img src="/%5Cimages%5C2024-11-24%5COIP-CPP.png" alt="OIP-CPP"></p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><img src="/%5Cimages%5C2024-11-24%5COIP-Java.jpg" alt="OIP-Java"></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>下为Python3的各符号优先级顺序，优先级从高到低</p><p><img src="/%5Cimages%5C2024-11-24%5COIP-Python.png" alt="OIP-Python"></p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><p>Go的各运算符优先级如下，优先级&#x3D;&#x3D;从低到高&#x3D;&#x3D;</p><p><img src="/%5Cimages%5C2024-11-24%5COIP-Go.png" alt="OIP-Go"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      
        <title>记录我的第一个博客</title>
      
      <link href="/2024/11/19/hello-world/"/>
      <url>/2024/11/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>·很高兴创建了我的第一个博客，之后我会努力学习，并分享我的收获和经验</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>